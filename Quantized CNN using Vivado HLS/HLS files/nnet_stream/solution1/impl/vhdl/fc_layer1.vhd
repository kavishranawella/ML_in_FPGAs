-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of fc_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv44_8169D : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000001011010011101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv24_FFFFFE : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv31_816A0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000001011010100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer1_weights_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_layer1_weights_V_ce0 : STD_LOGIC;
    signal fc_layer1_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_layer1_weights_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_layer1_weights_V_ce1 : STD_LOGIC;
    signal fc_layer1_weights_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_layer1_bias_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc_layer1_bias_V_ce0 : STD_LOGIC;
    signal fc_layer1_bias_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_temp_V_cast_fu_341_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal read_temp_V_cast_reg_953 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_6_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_961 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond5_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_427_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_cast_reg_974 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal p_1_cast_fu_431_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_1_cast_reg_982 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_11_reg_998 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_12_reg_1009 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_fu_537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_914_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_reg_1020 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_921_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_104_1_reg_1025 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_addr_13_reg_1035 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_14_reg_1045 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_10_3_fu_653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_10_3_reg_1050 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_928_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_104_2_reg_1055 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_935_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_104_3_reg_1060 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_7_fu_673_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_1068 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_689_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_s_reg_1083 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal f_op_V_3_reg_1088 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_61_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal output_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_284 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_296 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_reg_308 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i2_reg_320 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_cast_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_1_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_2_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_3_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_9_cast_fu_406_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_V_fu_331_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_331_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_335_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_357_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_369_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_377_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_cast_fu_365_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_39_fu_381_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_9_fu_401_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_9_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_9_fu_401_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_3_fu_417_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_5_fu_421_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_446_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_458_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl9_cast_fu_466_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl8_cast_fu_454_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_42_fu_470_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_43_fu_476_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_10_s_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_509_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_517_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl6_cast_fu_505_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_46_fu_521_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_fu_527_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_10_1_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_562_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_fu_574_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_582_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl4_cast_fu_570_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_50_fu_586_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_51_fu_592_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_10_2_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_613_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_625_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_633_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl2_cast_fu_621_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_54_fu_637_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_55_fu_643_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_fu_689_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_942_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_13_fu_705_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_725_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_57_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_i_i3_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i3_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_fu_718_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_cast_fu_752_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_15_cast_fu_714_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_13_fu_756_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_60_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_a_V_i_fu_770_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_a_V_i_cast1_fu_778_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_a_V_i_cast_fu_782_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_7_fu_790_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_15_fu_814_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_819_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_35_mux_fu_889_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_525_fu_897_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_914_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_921_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_928_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_935_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component nnet_mac_muladd_8b9t IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnet_mac_muladd_3cau IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (43 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component fc_layer1_fc_layeb7t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fc_layer1_fc_layeb8t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component fc_layer1_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    fc_layer1_weights_V_U : component fc_layer1_fc_layeb7t
    generic map (
        DataWidth => 8,
        AddressRange => 69120,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_V_address0,
        ce0 => fc_layer1_weights_V_ce0,
        q0 => fc_layer1_weights_V_q0,
        address1 => fc_layer1_weights_V_address1,
        ce1 => fc_layer1_weights_V_ce1,
        q1 => fc_layer1_weights_V_q1);

    fc_layer1_bias_V_U : component fc_layer1_fc_layeb8t
    generic map (
        DataWidth => 10,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_bias_V_address0,
        ce0 => fc_layer1_bias_V_ce0,
        q0 => fc_layer1_bias_V_q0);

    output_V_U : component fc_layer1_output_V
    generic map (
        DataWidth => 24,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => output_V_d1,
        q1 => output_V_q1);

    nnet_mac_muladd_8b9t_U56 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer1_weights_V_q0,
        din1 => grp_fu_914_p1,
        din2 => output_V_q0,
        dout => grp_fu_914_p3);

    nnet_mac_muladd_8b9t_U57 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer1_weights_V_q1,
        din1 => grp_fu_921_p1,
        din2 => output_V_q1,
        dout => grp_fu_921_p3);

    nnet_mac_muladd_8b9t_U58 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer1_weights_V_q0,
        din1 => grp_fu_928_p1,
        din2 => output_V_q1,
        dout => grp_fu_928_p3);

    nnet_mac_muladd_8b9t_U59 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer1_weights_V_q1,
        din1 => grp_fu_935_p1,
        din2 => output_V_q0,
        dout => grp_fu_935_p3);

    nnet_mac_muladd_3cau_U60 : component nnet_mac_muladd_3cau
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 10,
        din2_WIDTH => 44,
        dout_WIDTH => 44)
    port map (
        din0 => ap_const_lv31_816A0,
        din1 => f_op_V_3_reg_1088,
        din2 => p_Val2_s_reg_1083,
        dout => grp_fu_942_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_667_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i1_reg_308 <= i_10_3_reg_1050;
            elsif ((not(((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_reg_308 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i2_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_reg_320 <= ap_const_lv7_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i2_reg_320 <= i_7_reg_1068;
            end if; 
        end if;
    end process;

    i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_284 <= i_6_reg_961;
            elsif ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_284 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_296 <= ap_const_lv10_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_435_p2 = ap_const_lv1_1))) then 
                j_reg_296 <= j_3_fu_537_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                f_op_V_3_reg_1088 <= fc_layer1_bias_V_q0;
                p_Val2_s_reg_1083 <= p_Val2_s_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_10_3_reg_1050 <= i_10_3_fu_653_p2;
                    output_V_addr_13_reg_1035(0) <= tmp_103_2_fu_557_p1(7 - 1 downto 0)(0);    output_V_addr_13_reg_1035(6 downto 2) <= tmp_103_2_fu_557_p1(7 - 1 downto 0)(6 downto 2);
                    output_V_addr_14_reg_1045(6 downto 2) <= tmp_103_3_fu_608_p1(7 - 1 downto 0)(6 downto 2);
                tmp_104_1_reg_1025 <= grp_fu_921_p3;
                tmp_9_reg_1020 <= grp_fu_914_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_961 <= i_6_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_7_reg_1068 <= i_7_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                isneg_reg_1098 <= r_V_7_fu_790_p2(23 downto 23);
                tmp_14_reg_1104 <= r_V_7_fu_790_p2(23 downto 8);
                tmp_61_reg_1093 <= tmp_61_fu_786_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                output_V_addr_11_reg_998 <= tmp_8_fu_441_p1(7 - 1 downto 0);
                    output_V_addr_12_reg_1009(6 downto 1) <= tmp_103_1_fu_492_p1(7 - 1 downto 0)(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_1_cast_reg_982 <= p_1_cast_fu_431_p1;
                    tmp_4_cast_reg_974(9 downto 0) <= tmp_4_cast_fu_427_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                read_temp_V_cast_reg_953 <= read_temp_V_cast_fu_341_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_104_2_reg_1055 <= grp_fu_928_p3;
                tmp_104_3_reg_1060 <= grp_fu_935_p3;
            end if;
        end if;
    end process;
    tmp_4_cast_reg_974(16 downto 10) <= "0000000";
    output_V_addr_12_reg_1009(0) <= '1';
    output_V_addr_13_reg_1035(1) <= '1';
    output_V_addr_14_reg_1045(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state12, ap_CS_fsm_state4, exitcond6_fu_411_p2, ap_CS_fsm_state2, exitcond5_fu_345_p2, ap_CS_fsm_state5, exitcond2_fu_435_p2, ap_CS_fsm_state9, exitcond_fu_667_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if ((not(((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_435_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_667_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_V_V_empty_n)
    begin
                ap_block_state1 <= ((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(in_V_V_empty_n, exitcond6_fu_411_p2)
    begin
                ap_block_state4 <= ((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, exitcond_fu_667_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_667_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_667_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_667_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge39_i_i_fu_860_p2 <= (p_not38_i_i_fu_855_p2 or newsignbit_0_not_i_i_fu_849_p2);
    brmerge_fu_883_p2 <= (underflow_not_fu_877_p2 or overflow_fu_843_p2);
    brmerge_i_i_fu_832_p2 <= (p_not_i_i_fu_827_p2 or newsignbit_fu_819_p3);
    brmerge_i_i_i_fu_871_p2 <= (underflow_fu_866_p2 or overflow_fu_843_p2);
    exitcond2_fu_435_p2 <= "1" when (i1_reg_308 = ap_const_lv7_78) else "0";
    exitcond5_fu_345_p2 <= "1" when (i_reg_284 = ap_const_lv7_78) else "0";
    exitcond6_fu_411_p2 <= "1" when (j_reg_296 = ap_const_lv10_240) else "0";
    exitcond_fu_667_p2 <= "1" when (i2_reg_320 = ap_const_lv7_78) else "0";
    fc_layer1_bias_V_address0 <= tmp_5_fu_679_p1(7 - 1 downto 0);

    fc_layer1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_bias_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_40_cast_fu_387_p1, tmp_44_cast_fu_481_p1, tmp_52_cast_fu_597_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_V_address0 <= tmp_52_cast_fu_597_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_V_address0 <= tmp_44_cast_fu_481_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_V_address0 <= tmp_40_cast_fu_387_p1(17 - 1 downto 0);
        else 
            fc_layer1_weights_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_48_cast_fu_532_p1, tmp_56_cast_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_V_address1 <= tmp_56_cast_fu_648_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_V_address1 <= tmp_48_cast_fu_532_p1(17 - 1 downto 0);
        else 
            fc_layer1_weights_V_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer1_weights_V_ce1 <= ap_const_logic_1;
        else 
            fc_layer1_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_914_p1 <= p_1_cast_reg_982(9 - 1 downto 0);
    grp_fu_921_p1 <= p_1_cast_reg_982(9 - 1 downto 0);
    grp_fu_928_p1 <= p_1_cast_reg_982(9 - 1 downto 0);
    grp_fu_935_p1 <= p_1_cast_reg_982(9 - 1 downto 0);
    i_10_1_fu_551_p2 <= (i1_reg_308 or ap_const_lv7_2);
    i_10_2_fu_602_p2 <= (i1_reg_308 or ap_const_lv7_3);
    i_10_3_fu_653_p2 <= std_logic_vector(unsigned(i1_reg_308) + unsigned(ap_const_lv7_4));
    i_10_s_fu_486_p2 <= (i1_reg_308 or ap_const_lv7_1);
    i_6_fu_351_p2 <= std_logic_vector(unsigned(i_reg_284) + unsigned(ap_const_lv7_1));
    i_7_fu_673_p2 <= std_logic_vector(unsigned(i2_reg_320) + unsigned(ap_const_lv7_1));

    in_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state4, exitcond6_fu_411_p2)
    begin
        if ((((exitcond6_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state4, exitcond6_fu_411_p2)
    begin
        if (((not(((exitcond6_fu_411_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_537_p2 <= std_logic_vector(unsigned(j_reg_296) + unsigned(ap_const_lv10_1));
        lhs_V_3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),9));

    lhs_V_fu_331_p0 <= in_V_V_dout;
        lhs_V_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_331_p0),9));

    newsignbit_0_not_i_i_fu_849_p2 <= (newsignbit_fu_819_p3 xor ap_const_lv1_1);
    newsignbit_fu_819_p3 <= p_Val2_15_fu_814_p2(7 downto 7);
    not_s_i_i3_fu_734_p2 <= (tmp_57_fu_698_p3 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= 
        p_Val2_35_mux_fu_889_p3 when (brmerge_fu_883_p2(0) = '1') else 
        p_Val2_s_525_fu_897_p3;

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state12)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, output_V_addr_12_reg_1009, ap_CS_fsm_state6, output_V_addr_14_reg_1045, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8, tmp_s_fu_392_p1, tmp_8_fu_441_p1, tmp_103_3_fu_608_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address0 <= output_V_addr_14_reg_1045;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address0 <= output_V_addr_12_reg_1009;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= tmp_103_3_fu_608_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= tmp_8_fu_441_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= tmp_s_fu_392_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state5, output_V_addr_11_reg_998, ap_CS_fsm_state6, output_V_addr_13_reg_1035, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8, tmp_103_1_fu_492_p1, tmp_103_2_fu_557_p1, tmp_5_fu_679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_address1 <= tmp_5_fu_679_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address1 <= output_V_addr_13_reg_1035;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address1 <= output_V_addr_11_reg_998;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= tmp_103_2_fu_557_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address1 <= tmp_103_1_fu_492_p1(7 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, tmp_104_1_reg_1025, ap_CS_fsm_state7, tmp_104_3_reg_1060, ap_CS_fsm_state3, ap_CS_fsm_state8, p_9_cast_fu_406_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_d0 <= tmp_104_3_reg_1060;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d0 <= tmp_104_1_reg_1025;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_d0 <= p_9_cast_fu_406_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv24_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(tmp_9_reg_1020, tmp_104_2_reg_1055, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_d1 <= tmp_104_2_reg_1055;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d1 <= tmp_9_reg_1020;
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_843_p2 <= (tmp_7_fu_838_p2 and brmerge_i_i_fu_832_p2);
        p_1_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_421_p2),17));

        p_9_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_9_fu_401_p2),24));

    p_9_fu_401_p0 <= fc_layer1_weights_V_q0;
    p_9_fu_401_p1 <= read_temp_V_cast_reg_953(9 - 1 downto 0);
    p_9_fu_401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_9_fu_401_p0) * signed(p_9_fu_401_p1))), 17));
    p_Val2_13_fu_756_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_752_p1) + unsigned(p_Val2_15_cast_fu_714_p1));
        p_Val2_15_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_705_p4),17));

    p_Val2_15_fu_814_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(tmp_61_reg_1093));
    p_Val2_35_mux_fu_889_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_fu_871_p2(0) = '1') else 
        p_Val2_15_fu_814_p2;
    p_Val2_s_525_fu_897_p3 <= 
        ap_const_lv8_80 when (underflow_fu_866_p2(0) = '1') else 
        p_Val2_15_fu_814_p2;
    p_Val2_s_fu_689_p1 <= output_V_q1;
    p_Val2_s_fu_689_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv44_8169D) * signed(p_Val2_s_fu_689_p1))), 44));
        p_a_V_i_cast1_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_a_V_i_fu_770_p3),23));

    p_a_V_i_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_a_V_i_cast1_fu_778_p1),24));
    p_a_V_i_fu_770_p3 <= 
        ap_const_lv17_0 when (tmp_60_fu_762_p3(0) = '1') else 
        p_Val2_13_fu_756_p2;
    p_not38_i_i_fu_855_p2 <= "0" when (tmp_14_reg_1104 = ap_const_lv16_FFFF) else "1";
    p_not_i_i_fu_827_p2 <= "0" when (tmp_14_reg_1104 = ap_const_lv16_0) else "1";
    p_shl1_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_369_p3),17));
    p_shl2_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_613_p3),17));
    p_shl3_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_625_p3),17));
    p_shl4_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_562_p3),17));
    p_shl5_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_574_p3),17));
    p_shl6_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_497_p3),17));
    p_shl7_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_509_p3),17));
    p_shl8_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_446_p3),17));
    p_shl9_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_458_p3),17));
    p_shl_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_357_p3),17));
    qb_assign_3_fu_746_p2 <= (r_i_i3_fu_740_p2 and qbit_fu_718_p3);
    qbit_fu_718_p3 <= grp_fu_942_p3(27 downto 27);
    r_V_5_fu_421_p2 <= std_logic_vector(signed(lhs_V_3_fu_417_p1) + signed(ap_const_lv9_2));
    r_V_7_fu_790_p2 <= std_logic_vector(signed(ap_const_lv24_FFFFFE) + signed(p_a_V_i_cast_fu_782_p1));
    r_V_fu_335_p2 <= std_logic_vector(signed(lhs_V_fu_331_p1) + signed(ap_const_lv9_2));
    r_fu_728_p2 <= "0" when (tmp_59_fu_725_p1 = ap_const_lv27_0) else "1";
    r_i_i3_fu_740_p2 <= (r_fu_728_p2 or not_s_i_i3_fu_734_p2);
        read_temp_V_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_335_p2),17));

    tmp_103_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_s_fu_486_p2),64));
    tmp_103_2_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_1_fu_551_p2),64));
    tmp_103_3_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_2_fu_602_p2),64));
    tmp_13_fu_705_p4 <= grp_fu_942_p3(43 downto 28);
    tmp_16_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_3_fu_746_p2),17));
    tmp_37_fu_357_p3 <= (i_reg_284 & ap_const_lv9_0);
    tmp_38_fu_369_p3 <= (i_reg_284 & ap_const_lv6_0);
    tmp_39_fu_381_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_377_p1) + unsigned(p_shl_cast_fu_365_p1));
    tmp_40_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_381_p2),64));
    tmp_40_fu_446_p3 <= (i1_reg_308 & ap_const_lv9_0);
    tmp_41_fu_458_p3 <= (i1_reg_308 & ap_const_lv6_0);
    tmp_42_fu_470_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_466_p1) + unsigned(p_shl8_cast_fu_454_p1));
    tmp_43_fu_476_p2 <= std_logic_vector(unsigned(tmp_42_fu_470_p2) + unsigned(tmp_4_cast_reg_974));
    tmp_44_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_476_p2),64));
    tmp_44_fu_497_p3 <= (i_10_s_fu_486_p2 & ap_const_lv9_0);
    tmp_45_fu_509_p3 <= (i_10_s_fu_486_p2 & ap_const_lv6_0);
    tmp_46_fu_521_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_517_p1) + unsigned(p_shl6_cast_fu_505_p1));
    tmp_47_fu_527_p2 <= std_logic_vector(unsigned(tmp_46_fu_521_p2) + unsigned(tmp_4_cast_reg_974));
    tmp_48_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_527_p2),64));
    tmp_48_fu_562_p3 <= (i_10_1_fu_551_p2 & ap_const_lv9_0);
    tmp_49_fu_574_p3 <= (i_10_1_fu_551_p2 & ap_const_lv6_0);
    tmp_4_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_296),17));
    tmp_50_fu_586_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_582_p1) + unsigned(p_shl4_cast_fu_570_p1));
    tmp_51_fu_592_p2 <= std_logic_vector(unsigned(tmp_50_fu_586_p2) + unsigned(tmp_4_cast_reg_974));
    tmp_52_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_592_p2),64));
    tmp_52_fu_613_p3 <= (i_10_2_fu_602_p2 & ap_const_lv9_0);
    tmp_53_fu_625_p3 <= (i_10_2_fu_602_p2 & ap_const_lv6_0);
    tmp_54_fu_637_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_633_p1) + unsigned(p_shl2_cast_fu_621_p1));
    tmp_55_fu_643_p2 <= std_logic_vector(unsigned(tmp_54_fu_637_p2) + unsigned(tmp_4_cast_reg_974));
    tmp_56_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_643_p2),64));
    tmp_57_fu_698_p3 <= grp_fu_942_p3(43 downto 43);
    tmp_59_fu_725_p1 <= grp_fu_942_p3(27 - 1 downto 0);
    tmp_5_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_320),64));
    tmp_60_fu_762_p3 <= p_Val2_13_fu_756_p2(16 downto 16);
    tmp_61_fu_786_p1 <= p_a_V_i_fu_770_p3(8 - 1 downto 0);
    tmp_7_fu_838_p2 <= (isneg_reg_1098 xor ap_const_lv1_1);
    tmp_8_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_308),64));
    tmp_s_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_284),64));
    underflow_fu_866_p2 <= (isneg_reg_1098 and brmerge39_i_i_fu_860_p2);
    underflow_not_fu_877_p2 <= (underflow_fu_866_p2 xor ap_const_lv1_1);
end behav;

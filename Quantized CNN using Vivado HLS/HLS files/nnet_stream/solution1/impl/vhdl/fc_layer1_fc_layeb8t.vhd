-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc_layer1_fc_layeb8t_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc_layer1_fc_layeb8t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101011000", 1 => "0001110100", 2 => "1111010010", 3 => "1101111011", 
    4 => "1111110100", 5 => "1101110110", 6 => "1111000111", 7 => "0000011010", 
    8 => "1111000100", 9 => "0001110100", 10 => "0011100111", 11 => "1101000111", 
    12 => "1101100000", 13 => "0011000011", 14 => "0000011010", 15 => "0000000100", 
    16 => "1100011110", 17 => "0001000111", 18 => "1011100100", 19 => "1100111001", 
    20 => "0000001001", 21 => "1010111011", 22 => "0000110100", 23 => "1101000011", 
    24 => "1111001100", 25 => "1010011010", 26 => "0001010001", 27 => "0000100010", 
    28 => "1101110111", 29 => "0000111011", 30 => "0000100101", 31 => "1111100100", 
    32 => "1111100110", 33 => "0001001101", 34 => "1101101001", 35 => "1111100110", 
    36 => "1110110001", 37 => "1110010010", 38 => "0000010101", 39 => "0000101011", 
    40 => "0001000110", 41 => "1110001101", 42 => "0000111010", 43 => "0011101001", 
    44 => "0010010011", 45 => "1100110010", 46 => "1111010110", 47 => "0000010101", 
    48 => "0001001010", 49 => "1110001000", 50 => "0000111011", 51 => "0000110111", 
    52 => "0001100110", 53 => "0010001111", 54 => "1011011110", 55 => "0000010000", 
    56 => "0010010111", 57 => "0000001001", 58 => "1111010011", 59 => "1111001111", 
    60 => "1110100011", 61 => "0010100111", 62 => "0001010011", 63 => "1100011101", 
    64 => "1111110110", 65 => "0001011011", 66 => "1110111010", 67 => "1101011110", 
    68 => "1100011011", 69 => "1110111100", 70 => "1111011110", 71 => "0001100000", 
    72 => "1111101010", 73 => "1101100000", 74 => "1101111111", 75 => "0000111010", 
    76 => "1111111011", 77 => "0000101010", 78 => "1110100101", 79 => "1110000010", 
    80 => "0101001111", 81 => "1101101001", 82 => "1111110100", 83 => "1111011011", 
    84 => "1110000011", 85 => "0011000111", 86 => "0000010110", 87 => "0001101100", 
    88 => "0001011110", 89 => "0001111000", 90 => "0000010101", 91 => "1110000100", 
    92 => "0001011110", 93 => "0001011000", 94 => "0011101010", 95 => "0000000100", 
    96 => "0010100100", 97 => "0000111111", 98 => "1110110111", 99 => "0000111101", 
    100 => "1111011001", 101 => "1111100101", 102 => "1111010111", 103 => "0000110000", 
    104 => "1100100110", 105 => "1111010000", 106 => "0000011001", 107 => "1111011011", 
    108 => "1100011110", 109 => "0000110110", 110 => "0000100000", 111 => "1111100010", 
    112 => "0001110011", 113 => "1010101100", 114 => "0000100100", 115 => "1110100111", 
    116 => "1100111010", 117 => "1110000001", 118 => "0001111111", 119 => "0000110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity fc_layer1_fc_layeb8t is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc_layer1_fc_layeb8t is
    component fc_layer1_fc_layeb8t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc_layer1_fc_layeb8t_rom_U :  component fc_layer1_fc_layeb8t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



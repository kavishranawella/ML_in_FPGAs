-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of fc_layer3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv44_9E204 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010011110001000000100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv11_54 : STD_LOGIC_VECTOR (10 downto 0) := "00001010100";
    constant ap_const_lv31_9E1F9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010011110000111111001";
    constant ap_const_lv32_C0461C : STD_LOGIC_VECTOR (31 downto 0) := "00000000110000000100011000011100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer3_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer3_weights_V_ce0 : STD_LOGIC;
    signal fc_layer3_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_layer3_weights_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer3_weights_V_ce1 : STD_LOGIC;
    signal fc_layer3_weights_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_layer3_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_layer3_bias_V_ce0 : STD_LOGIC;
    signal fc_layer3_bias_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal read_temp_V_cast_fu_354_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal read_temp_V_cast_reg_843 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_2_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_851 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_856 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast1_fu_416_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_cast1_reg_869 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_1_cast_fu_420_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_cast_reg_875 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_2_cast_fu_424_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_2_cast_reg_881 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_s_fu_436_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_s_reg_894 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_3_reg_904 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_4_reg_910 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_1_fu_467_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_1_reg_916 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond17_2_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_2_fu_491_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_2_reg_929 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_3_fu_505_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_3_reg_939 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_5_reg_949 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_6_reg_954 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_fu_539_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_962 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_555_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_s_reg_977 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal f_op_V_1_reg_982 : STD_LOGIC_VECTOR (9 downto 0);
    signal qb_assign_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_7_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal isneg_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_1_fu_749_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal this_assign_1_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal output_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal phi_mul_reg_290 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_301 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i2_reg_325 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_cast_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_1_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_2_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_3_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_cast_fu_395_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_776_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_784_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_808_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_V_fu_344_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_1_fu_390_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_1_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_390_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_1_fu_406_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_760_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_768_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_792_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_487_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_800_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_s_fu_555_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_824_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_6_fu_571_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_591_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_i_i1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i1_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_fu_584_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_cast_fu_580_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_cast_fu_618_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_3_fu_631_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_645_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_667_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_mux_fu_733_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_511_fu_741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_760_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_760_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_768_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_768_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_776_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_792_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_792_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_792_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_800_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_800_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_800_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_808_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_fu_836_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_760_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_768_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_792_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_800_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component nnet_mac_muladd_4cgu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component nnet_mac_muladd_4chv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component nnet_mac_muladd_9civ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnet_mac_muladd_8cjv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component nnet_mac_muladd_8ckv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component nnet_mac_muladd_3clv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (43 downto 0);
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component nnet_mul_mul_25nscmv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer3_fc_layeceu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fc_layer3_fc_layecfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component fc_layer1_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    fc_layer3_weights_V_U : component fc_layer3_fc_layeceu
    generic map (
        DataWidth => 8,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer3_weights_V_address0,
        ce0 => fc_layer3_weights_V_ce0,
        q0 => fc_layer3_weights_V_q0,
        address1 => fc_layer3_weights_V_address1,
        ce1 => fc_layer3_weights_V_ce1,
        q1 => fc_layer3_weights_V_q1);

    fc_layer3_bias_V_U : component fc_layer3_fc_layecfu
    generic map (
        DataWidth => 10,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer3_bias_V_address0,
        ce0 => fc_layer3_bias_V_ce0,
        q0 => fc_layer3_bias_V_q0);

    output_V_U : component fc_layer1_output_V
    generic map (
        DataWidth => 24,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => output_V_d1,
        q1 => output_V_q1);

    nnet_mac_muladd_4cgu_U79 : component nnet_mac_muladd_4cgu
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_760_p0,
        din1 => grp_fu_760_p1,
        din2 => grp_fu_760_p2,
        dout => grp_fu_760_p3);

    nnet_mac_muladd_4chv_U80 : component nnet_mac_muladd_4chv
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_768_p0,
        din1 => grp_fu_768_p1,
        din2 => grp_fu_768_p2,
        dout => grp_fu_768_p3);

    nnet_mac_muladd_9civ_U81 : component nnet_mac_muladd_9civ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_776_p0,
        din1 => reg_336,
        din2 => output_V_q0,
        dout => grp_fu_776_p3);

    nnet_mac_muladd_9civ_U82 : component nnet_mac_muladd_9civ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_784_p0,
        din1 => reg_340,
        din2 => output_V_q1,
        dout => grp_fu_784_p3);

    nnet_mac_muladd_8cjv_U83 : component nnet_mac_muladd_8cjv
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_792_p0,
        din1 => grp_fu_792_p1,
        din2 => grp_fu_792_p2,
        dout => grp_fu_792_p3);

    nnet_mac_muladd_8ckv_U84 : component nnet_mac_muladd_8ckv
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_800_p0,
        din1 => grp_fu_800_p1,
        din2 => grp_fu_800_p2,
        dout => grp_fu_800_p3);

    nnet_mac_muladd_9civ_U85 : component nnet_mac_muladd_9civ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_808_p0,
        din1 => reg_336,
        din2 => output_V_q1,
        dout => grp_fu_808_p3);

    nnet_mac_muladd_9civ_U86 : component nnet_mac_muladd_9civ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_816_p0,
        din1 => reg_340,
        din2 => output_V_q0,
        dout => grp_fu_816_p3);

    nnet_mac_muladd_3clv_U87 : component nnet_mac_muladd_3clv
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 10,
        din2_WIDTH => 44,
        dout_WIDTH => 44)
    port map (
        din0 => ap_const_lv31_9E1F9,
        din1 => f_op_V_1_reg_982,
        din2 => p_Val2_s_reg_977,
        dout => grp_fu_824_p3);

    nnet_mul_mul_25nscmv_U88 : component nnet_mul_mul_25nscmv
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_V_fu_836_p0,
        din1 => this_assign_1_reg_1013,
        dout => tmp_V_fu_836_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_533_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i1_reg_313 <= i_4_3_reg_939;
            elsif ((not(((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond2_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_reg_313 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i2_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond2_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_reg_325 <= ap_const_lv4_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i2_reg_325 <= i_3_reg_962;
            end if; 
        end if;
    end process;

    i_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_278 <= i_2_reg_851;
            elsif ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_278 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_363_p2 = ap_const_lv1_1))) then 
                j_reg_301 <= ap_const_lv7_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond17_2_fu_473_p2 = ap_const_lv1_1))) then 
                j_reg_301 <= j_1_fu_511_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_290 <= next_mul_reg_856;
            elsif ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_290 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                f_op_V_1_reg_982 <= fc_layer3_bias_V_q0;
                p_Val2_s_reg_977 <= p_Val2_s_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_851 <= i_2_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_962 <= i_3_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    i_4_1_reg_916(0) <= i_4_1_fu_467_p2(0);    i_4_1_reg_916(3 downto 2) <= i_4_1_fu_467_p2(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_2_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    i_4_2_reg_929(2) <= i_4_2_fu_491_p2(2);
                i_4_3_reg_939 <= i_4_3_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    i_4_s_reg_894(3 downto 1) <= i_4_s_fu_436_p2(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_997 <= p_Val2_3_fu_631_p2(16 downto 16);
                p_not38_i_reg_1008 <= p_not38_i_fu_661_p2;
                p_not_i_reg_1003 <= p_not_i_fu_655_p2;
                qb_assign_1_reg_987 <= qb_assign_1_fu_612_p2;
                tmp_7_reg_992 <= grp_fu_824_p3(35 downto 28);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                next_mul_reg_856 <= next_mul_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    output_V_addr_3_reg_904(3 downto 0) <= tmp_3_fu_450_p1(7 - 1 downto 0)(3 downto 0);
                    output_V_addr_4_reg_910(3 downto 1) <= tmp_48_1_fu_455_p1(7 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    output_V_addr_5_reg_949(0) <= tmp_48_2_fu_517_p1(7 - 1 downto 0)(0);    output_V_addr_5_reg_949(3 downto 2) <= tmp_48_2_fu_517_p1(7 - 1 downto 0)(3 downto 2);
                    output_V_addr_6_reg_954(2) <= tmp_48_3_fu_521_p1(7 - 1 downto 0)(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond2_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_2_cast_reg_881 <= p_2_cast_fu_424_p1;
                    tmp_1_cast1_reg_869(6 downto 0) <= tmp_1_cast1_fu_416_p1(6 downto 0);
                    tmp_1_cast_reg_875(6 downto 0) <= tmp_1_cast_fu_420_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                read_temp_V_cast_reg_843 <= read_temp_V_cast_fu_354_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_336 <= fc_layer3_weights_V_q0;
                reg_340 <= fc_layer3_weights_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                this_assign_1_reg_1013 <= this_assign_1_fu_749_p3;
            end if;
        end if;
    end process;
    tmp_1_cast1_reg_869(10 downto 7) <= "0000";
    tmp_1_cast_reg_875(9 downto 7) <= "000";
    i_4_s_reg_894(0) <= '1';
    output_V_addr_3_reg_904(6 downto 4) <= "000";
    output_V_addr_4_reg_910(0) <= '1';
    output_V_addr_4_reg_910(6 downto 4) <= "000";
    i_4_1_reg_916(1) <= '1';
    i_4_2_reg_929(1 downto 0) <= "11";
    output_V_addr_5_reg_949(1) <= '1';
    output_V_addr_5_reg_949(6 downto 4) <= "000";
    output_V_addr_6_reg_954(1 downto 0) <= "11";
    output_V_addr_6_reg_954(6 downto 3) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state14, ap_CS_fsm_state4, exitcond2_fu_400_p2, ap_CS_fsm_state2, exitcond1_fu_363_p2, ap_CS_fsm_state7, exitcond17_2_fu_473_p2, ap_CS_fsm_state10, exitcond_fu_533_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if ((not(((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond2_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond2_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond17_2_fu_473_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_V_V_empty_n)
    begin
                ap_block_state1 <= ((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(in_V_V_empty_n, exitcond2_fu_400_p2)
    begin
                ap_block_state4 <= ((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10, exitcond_fu_533_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_533_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_533_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_533_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge39_i_fu_705_p2 <= (p_not38_i_reg_1008 or newsignbit_0_not_i_fu_699_p2);
    brmerge_fu_727_p2 <= (underflow_not_fu_721_p2 or overflow_fu_693_p2);
    brmerge_i_fu_683_p2 <= (p_not_i_reg_1003 or newsignbit_fu_675_p3);
    brmerge_i_i_fu_715_p2 <= (underflow_fu_710_p2 or overflow_fu_693_p2);
    exitcond17_2_fu_473_p2 <= "1" when (i_4_1_fu_467_p2 = ap_const_lv4_A) else "0";
    exitcond1_fu_363_p2 <= "1" when (i_reg_278 = ap_const_lv4_A) else "0";
    exitcond2_fu_400_p2 <= "1" when (j_reg_301 = ap_const_lv7_54) else "0";
    exitcond_fu_533_p2 <= "1" when (i2_reg_325 = ap_const_lv4_A) else "0";
    fc_layer3_bias_V_address0 <= tmp_2_fu_545_p1(4 - 1 downto 0);

    fc_layer3_bias_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer3_bias_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer3_weights_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, phi_mul_cast_fu_358_p1, tmp_12_cast_fu_432_p1, tmp_16_cast_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer3_weights_V_address0 <= tmp_16_cast_fu_483_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer3_weights_V_address0 <= tmp_12_cast_fu_432_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer3_weights_V_address0 <= phi_mul_cast_fu_358_p1(10 - 1 downto 0);
        else 
            fc_layer3_weights_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_layer3_weights_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_14_cast_fu_446_p1, tmp_18_cast_fu_501_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer3_weights_V_address1 <= tmp_18_cast_fu_501_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer3_weights_V_address1 <= tmp_14_cast_fu_446_p1(10 - 1 downto 0);
        else 
            fc_layer3_weights_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_layer3_weights_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            fc_layer3_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer3_weights_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer3_weights_V_ce1 <= ap_const_logic_1;
        else 
            fc_layer3_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_760_p0 <= grp_fu_760_p00(4 - 1 downto 0);
    grp_fu_760_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_313),10));
    grp_fu_760_p1 <= ap_const_lv10_54(8 - 1 downto 0);
    grp_fu_760_p2 <= tmp_1_cast_reg_875(7 - 1 downto 0);
    grp_fu_768_p0 <= grp_fu_768_p00(4 - 1 downto 0);
    grp_fu_768_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_s_fu_436_p2),11));
    grp_fu_768_p1 <= ap_const_lv11_54(8 - 1 downto 0);
    grp_fu_768_p2 <= tmp_1_cast1_reg_869(7 - 1 downto 0);
    grp_fu_776_p0 <= p_2_cast_reg_881(9 - 1 downto 0);
    grp_fu_784_p0 <= p_2_cast_reg_881(9 - 1 downto 0);
    grp_fu_792_p0 <= ap_const_lv11_54(8 - 1 downto 0);
    grp_fu_792_p1 <= grp_fu_792_p10(4 - 1 downto 0);
    grp_fu_792_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_1_fu_467_p2),11));
    grp_fu_792_p2 <= tmp_1_cast1_reg_869(7 - 1 downto 0);
    grp_fu_800_p0 <= ap_const_lv10_54(8 - 1 downto 0);
    grp_fu_800_p1 <= grp_fu_800_p10(3 - 1 downto 0);
    grp_fu_800_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_2_fu_491_p2),10));
    grp_fu_800_p2 <= tmp_1_cast_reg_875(7 - 1 downto 0);
    grp_fu_808_p0 <= p_2_cast_reg_881(9 - 1 downto 0);
    grp_fu_816_p0 <= p_2_cast_reg_881(9 - 1 downto 0);
    i_2_fu_369_p2 <= std_logic_vector(unsigned(i_reg_278) + unsigned(ap_const_lv4_1));
    i_3_fu_539_p2 <= std_logic_vector(unsigned(i2_reg_325) + unsigned(ap_const_lv4_1));
    i_4_1_fu_467_p2 <= (i1_reg_313 or ap_const_lv4_2);
    i_4_2_fu_491_p2 <= (tmp_22_fu_487_p1 or ap_const_lv3_3);
    i_4_3_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(i1_reg_313));
    i_4_s_fu_436_p2 <= (i1_reg_313 or ap_const_lv4_1);

    in_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state4, exitcond2_fu_400_p2)
    begin
        if ((((exitcond2_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state4, exitcond2_fu_400_p2)
    begin
        if (((not(((exitcond2_fu_400_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond2_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_511_p2 <= std_logic_vector(unsigned(j_reg_301) + unsigned(ap_const_lv7_1));
        lhs_V_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),9));

    lhs_V_fu_344_p0 <= in_V_V_dout;
        lhs_V_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_344_p0),9));

    newsignbit_0_not_i_fu_699_p2 <= (newsignbit_fu_675_p3 xor ap_const_lv1_1);
    newsignbit_fu_675_p3 <= p_Val2_4_fu_670_p2(7 downto 7);
    next_mul_fu_375_p2 <= std_logic_vector(unsigned(phi_mul_reg_290) + unsigned(ap_const_lv10_54));
    not_s_i_i1_fu_600_p2 <= (tmp_13_fu_564_p3 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= tmp_V_fu_836_p2;

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state14)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state8, output_V_addr_4_reg_910, ap_CS_fsm_state7, output_V_addr_6_reg_954, ap_CS_fsm_state3, ap_CS_fsm_state9, tmp_s_fu_381_p1, tmp_3_fu_450_p1, tmp_48_3_fu_521_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_address0 <= output_V_addr_6_reg_954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address0 <= tmp_48_3_fu_521_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address0 <= output_V_addr_4_reg_910;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= tmp_3_fu_450_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= tmp_s_fu_381_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, output_V_addr_3_reg_904, ap_CS_fsm_state7, output_V_addr_5_reg_949, ap_CS_fsm_state10, ap_CS_fsm_state9, tmp_48_1_fu_455_p1, tmp_48_2_fu_517_p1, tmp_2_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_address1 <= tmp_2_fu_545_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_address1 <= output_V_addr_5_reg_949;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address1 <= tmp_48_2_fu_517_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address1 <= output_V_addr_3_reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= tmp_48_1_fu_455_p1(7 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state9, p_1_cast_fu_395_p1, grp_fu_784_p3, grp_fu_816_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_d0 <= grp_fu_816_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d0 <= grp_fu_784_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_d0 <= p_1_cast_fu_395_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv24_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_fu_776_p3, grp_fu_808_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_d1 <= grp_fu_808_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d1 <= grp_fu_776_p3;
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_693_p2 <= (tmp_9_fu_688_p2 and brmerge_i_fu_683_p2);
        p_1_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_1_fu_390_p2),24));

    p_1_fu_390_p0 <= read_temp_V_cast_reg_843(9 - 1 downto 0);
    p_1_fu_390_p1 <= fc_layer3_weights_V_q0;
    p_1_fu_390_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_1_fu_390_p0) * signed(p_1_fu_390_p1))), 17));
        p_2_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_410_p2),17));

    p_Val2_11_mux_fu_733_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_715_p2(0) = '1') else 
        p_Val2_4_fu_670_p2;
        p_Val2_3_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_571_p4),17));

    p_Val2_3_fu_631_p2 <= std_logic_vector(signed(p_Val2_3_cast_fu_580_p1) + signed(tmp_6_cast_fu_618_p1));
    p_Val2_4_fu_670_p2 <= std_logic_vector(unsigned(tmp_7_reg_992) + unsigned(tmp_8_fu_667_p1));
    p_Val2_s_511_fu_741_p3 <= 
        ap_const_lv8_80 when (underflow_fu_710_p2(0) = '1') else 
        p_Val2_4_fu_670_p2;
    p_Val2_s_fu_555_p1 <= output_V_q1;
    p_Val2_s_fu_555_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv44_9E204) * signed(p_Val2_s_fu_555_p1))), 44));
    p_not38_i_fu_661_p2 <= "0" when (tmp_10_fu_645_p4 = ap_const_lv9_1FF) else "1";
    p_not_i_fu_655_p2 <= "0" when (tmp_10_fu_645_p4 = ap_const_lv9_0) else "1";
    phi_mul_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_290),64));
    qb_assign_1_fu_612_p2 <= (r_i_i1_fu_606_p2 and qbit_fu_584_p3);
    qbit_fu_584_p3 <= grp_fu_824_p3(27 downto 27);
    r_V_1_fu_410_p2 <= std_logic_vector(signed(lhs_V_1_fu_406_p1) + signed(ap_const_lv9_2));
    r_V_fu_348_p2 <= std_logic_vector(signed(lhs_V_fu_344_p1) + signed(ap_const_lv9_2));
    r_fu_594_p2 <= "0" when (tmp_19_fu_591_p1 = ap_const_lv27_0) else "1";
    r_i_i1_fu_606_p2 <= (r_fu_594_p2 or not_s_i_i1_fu_600_p2);
        read_temp_V_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_348_p2),17));

    this_assign_1_fu_749_p3 <= 
        p_Val2_11_mux_fu_733_p3 when (brmerge_fu_727_p2(0) = '1') else 
        p_Val2_s_511_fu_741_p3;
    tmp_10_fu_645_p4 <= p_Val2_3_fu_631_p2(16 downto 8);
    tmp_12_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_760_p3),64));
    tmp_13_fu_564_p3 <= grp_fu_824_p3(43 downto 43);
        tmp_14_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_768_p3),64));

        tmp_16_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_792_p3),64));

    tmp_18_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_800_p3),64));
    tmp_19_fu_591_p1 <= grp_fu_824_p3(27 - 1 downto 0);
    tmp_1_cast1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_301),11));
    tmp_1_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_301),10));
    tmp_22_fu_487_p1 <= i1_reg_313(3 - 1 downto 0);
    tmp_2_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_325),64));
    tmp_3_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_313),64));
    tmp_48_1_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_s_reg_894),64));
    tmp_48_2_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_1_reg_916),64));
    tmp_48_3_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_2_reg_929),64));
    tmp_6_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_fu_612_p2),17));
    tmp_6_fu_571_p4 <= grp_fu_824_p3(43 downto 28);
    tmp_8_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_reg_987),8));
    tmp_9_fu_688_p2 <= (isneg_reg_997 xor ap_const_lv1_1);
    tmp_V_fu_836_p0 <= ap_const_lv32_C0461C(25 - 1 downto 0);
    tmp_s_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_278),64));
    underflow_fu_710_p2 <= (isneg_reg_997 and brmerge39_i_fu_705_p2);
    underflow_not_fu_721_p2 <= (underflow_fu_710_p2 xor ap_const_lv1_1);
end behav;

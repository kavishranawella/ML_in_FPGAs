// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc181 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        image_in_V_V_din,
        image_in_V_V_full_n,
        image_in_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] image_in_V_V_din;
input   image_in_V_V_full_n;
output   image_in_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg image_in_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] input_activations_V_s_address0;
reg    input_activations_V_s_ce0;
wire   [7:0] input_activations_V_s_q0;
reg    image_in_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [5:0] i_fu_93_p2;
reg   [5:0] i_reg_140;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_141_cast_fu_107_p1;
reg   [11:0] tmp_141_cast_reg_145;
wire   [0:0] exitcond46_i_i_fu_87_p2;
wire   [5:0] j_fu_117_p2;
reg   [5:0] j_reg_153;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond45_i_i_fu_111_p2;
reg   [5:0] i_0_i_i_reg_65;
reg    ap_block_state1;
reg   [5:0] j_0_i_i_reg_76;
wire   [63:0] tmp_142_cast_fu_132_p1;
wire   [10:0] tmp_fu_99_p3;
wire   [11:0] tmp_i_cast_fu_123_p1;
wire   [11:0] tmp_s_fu_127_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

Loop_1_proc181_inbkb #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_activations_V_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_activations_V_s_address0),
    .ce0(input_activations_V_s_ce0),
    .q0(input_activations_V_s_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond46_i_i_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond45_i_i_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_i_reg_65 <= i_reg_140;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_65 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond46_i_i_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_i_reg_76 <= 6'd0;
    end else if (((image_in_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_i_i_reg_76 <= j_reg_153;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_140 <= i_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_153 <= j_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond46_i_i_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_141_cast_reg_145[10 : 5] <= tmp_141_cast_fu_107_p1[10 : 5];
    end
end

always @ (*) begin
    if (((exitcond46_i_i_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond46_i_i_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        image_in_V_V_blk_n = image_in_V_V_full_n;
    end else begin
        image_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((image_in_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        image_in_V_V_write = 1'b1;
    end else begin
        image_in_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_activations_V_s_ce0 = 1'b1;
    end else begin
        input_activations_V_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond46_i_i_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond45_i_i_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((image_in_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign exitcond45_i_i_fu_111_p2 = ((j_0_i_i_reg_76 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond46_i_i_fu_87_p2 = ((i_0_i_i_reg_65 == 6'd32) ? 1'b1 : 1'b0);

assign i_fu_93_p2 = (i_0_i_i_reg_65 + 6'd1);

assign image_in_V_V_din = input_activations_V_s_q0;

assign input_activations_V_s_address0 = tmp_142_cast_fu_132_p1;

assign j_fu_117_p2 = (j_0_i_i_reg_76 + 6'd1);

assign tmp_141_cast_fu_107_p1 = tmp_fu_99_p3;

assign tmp_142_cast_fu_132_p1 = tmp_s_fu_127_p2;

assign tmp_fu_99_p3 = {{i_0_i_i_reg_65}, {5'd0}};

assign tmp_i_cast_fu_123_p1 = j_0_i_i_reg_76;

assign tmp_s_fu_127_p2 = (tmp_141_cast_reg_145 + tmp_i_cast_fu_123_p1);

always @ (posedge ap_clk) begin
    tmp_141_cast_reg_145[4:0] <= 5'b00000;
    tmp_141_cast_reg_145[11] <= 1'b0;
end

endmodule //Loop_1_proc181

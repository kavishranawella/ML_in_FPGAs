-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc103 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_in_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_in_V_V_full_n : IN STD_LOGIC;
    image_in_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Loop_1_proc103 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_activations_V_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_activations_V_s_ce0 : STD_LOGIC;
    signal input_activations_V_s_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_93_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_118_cast_fu_107_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_118_cast_reg_145 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond10_i_i_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_117_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_153 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond9_i_i_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i_reg_65 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_0_i_i_reg_76 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_119_cast_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_99_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_cast_fu_123_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_127_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component Loop_1_proc103_inbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    input_activations_V_s_U : component Loop_1_proc103_inbkb
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_activations_V_s_address0,
        ce0 => input_activations_V_s_ce0,
        q0 => input_activations_V_s_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond10_i_i_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_i_i_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_i_reg_65 <= i_reg_140;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_65 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_i_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_i_i_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_i_reg_76 <= ap_const_lv6_0;
            elsif (((image_in_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_i_i_reg_76 <= j_reg_153;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_140 <= i_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_153 <= j_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_i_i_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_118_cast_reg_145(10 downto 5) <= tmp_118_cast_fu_107_p1(10 downto 5);
            end if;
        end if;
    end process;
    tmp_118_cast_reg_145(4 downto 0) <= "00000";
    tmp_118_cast_reg_145(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, image_in_V_V_full_n, ap_CS_fsm_state4, ap_CS_fsm_state2, exitcond10_i_i_fu_87_p2, ap_CS_fsm_state3, exitcond9_i_i_fu_111_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond10_i_i_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond9_i_i_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((image_in_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond10_i_i_fu_87_p2)
    begin
        if (((exitcond10_i_i_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond10_i_i_fu_87_p2)
    begin
        if (((exitcond10_i_i_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_i_i_fu_87_p2 <= "1" when (i_0_i_i_reg_65 = ap_const_lv6_20) else "0";
    exitcond9_i_i_fu_111_p2 <= "1" when (j_0_i_i_reg_76 = ap_const_lv6_20) else "0";
    i_fu_93_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_65) + unsigned(ap_const_lv6_1));

    image_in_V_V_blk_n_assign_proc : process(image_in_V_V_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_in_V_V_blk_n <= image_in_V_V_full_n;
        else 
            image_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    image_in_V_V_din <= input_activations_V_s_q0;

    image_in_V_V_write_assign_proc : process(image_in_V_V_full_n, ap_CS_fsm_state4)
    begin
        if (((image_in_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            image_in_V_V_write <= ap_const_logic_1;
        else 
            image_in_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    input_activations_V_s_address0 <= tmp_119_cast_fu_132_p1(10 - 1 downto 0);

    input_activations_V_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_activations_V_s_ce0 <= ap_const_logic_1;
        else 
            input_activations_V_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_117_p2 <= std_logic_vector(unsigned(j_0_i_i_reg_76) + unsigned(ap_const_lv6_1));
    tmp_118_cast_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_99_p3),12));
    tmp_119_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_127_p2),64));
    tmp_2_i_cast_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_76),12));
    tmp_fu_99_p3 <= (i_0_i_i_reg_65 & ap_const_lv5_0);
    tmp_s_fu_127_p2 <= std_logic_vector(unsigned(tmp_118_cast_reg_145) + unsigned(tmp_2_i_cast_fu_123_p1));
end behav;

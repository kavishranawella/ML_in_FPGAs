-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_layer1_conv_cud_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_layer1_conv_cud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01100000", 1 => "00011101", 2 => "00011111", 3 => "01001100", 
    4 => "00001011", 5 => "11110000", 6 => "10000001", 7 => "00101110", 
    8 => "11011110", 9 => "01000110", 10 => "11110001", 11 => "00011011", 
    12 => "10100111", 13 => "00111001", 14 => "11101011", 15 => "11100111", 
    16 => "11010100", 17 => "01110100", 18 => "01100001", 19 => "10110110", 
    20 => "10001100", 21 => "01000100", 22 => "10001110", 23 => "11101110", 
    24 => "00011001", 25 => "11111010", 26 => "10100110", 27 => "10000001", 
    28 => "11001011", 29 => "10101000", 30 => "11110000", 31 => "01100100", 
    32 => "11110010", 33 => "01100101", 34 => "01101010", 35 => "11001100", 
    36 => "00101011", 37 => "10100011", 38 => "01000111", 39 => "11101101", 
    40 => "01001100", 41 => "00000001", 42 => "01011100", 43 => "00010001", 
    44 => "11110100", 45 => "10000001", 46 => "01000110", 47 => "01001010", 
    48 => "00001000", 49 => "11000100", 50 => "00000000", 51 => "00001010", 
    52 => "10100101", 53 => "10111111", 54 => "01011000", 55 => "01001101", 
    56 => "11110010", 57 => "10000001", 58 => "10001110", 59 => "11110111", 
    60 => "01000100", 61 => "00100101", 62 => "11100010", 63 => "11101100", 
    64 => "00101010", 65 => "00111000", 66 => "00111011", 67 => "10100111", 
    68 => "00010000", 69 => "11100100", 70 => "11100110", 71 => "11011001", 
    72 => "00000000", 73 => "11110011", 74 => "11111101", 75 => "10000001", 
    76 => "00011110", 77 => "00000001", 78 => "11011101", 79 => "10100101", 
    80 => "01001111", 81 => "11101111", 82 => "10011100", 83 => "11111011", 
    84 => "11010010", 85 => "01000001", 86 => "10001110", 87 => "00011110", 
    88 => "10110110", 89 => "10000001", 90 => "10101001", 91 => "11010111", 
    92 => "11110100", 93 => "01010111", 94 => "11001001", 95 => "11100110", 
    96 => "10110101", 97 => "00000111", 98 => "00101100", 99 => "10000001", 
    100 => "01010011", 101 => "00100010", 102 => "00011100", 103 => "10110101", 
    104 => "11101100", 105 => "00000001", 106 to 107=> "10010111", 108 => "11101110", 
    109 => "01000110", 110 => "00101111", 111 => "10101101", 112 => "00110010", 
    113 => "00011011", 114 => "01000010", 115 => "00011000", 116 => "10011011", 
    117 => "00100111", 118 => "01011101", 119 => "01010010", 120 => "11111101", 
    121 => "00111110", 122 => "10000001", 123 => "00011100", 124 => "01000100", 
    125 => "00010110", 126 => "00000101", 127 => "01001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_layer1_conv_cud is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_layer1_conv_cud is
    component conv_layer1_conv_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_layer1_conv_cud_rom_U :  component conv_layer1_conv_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



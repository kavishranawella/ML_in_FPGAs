-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnet is
port (
    fc3_out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc3_out_V_V_full_n : IN STD_LOGIC;
    fc3_out_V_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of nnet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnet,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=13.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=13.613375,HLS_SYN_LAT=7190,HLS_SYN_TPT=7189,HLS_SYN_MEM=2,HLS_SYN_DSP=67,HLS_SYN_FF=3280,HLS_SYN_LUT=6074,HLS_VERSION=2018_2}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Loop_1_proc103_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc103_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc103_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc103_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc103_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc103_U0_image_in_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_1_proc103_U0_image_in_V_V_write : STD_LOGIC;
    signal conv_layer1_U0_ap_start : STD_LOGIC := '0';
    signal conv_layer1_U0_ap_done : STD_LOGIC;
    signal conv_layer1_U0_ap_continue : STD_LOGIC;
    signal conv_layer1_U0_ap_idle : STD_LOGIC;
    signal conv_layer1_U0_ap_ready : STD_LOGIC;
    signal conv_layer1_U0_out_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_layer1_U0_out_V_V_write : STD_LOGIC;
    signal conv_layer1_U0_in_V_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal image_in_V_V_full_n : STD_LOGIC;
    signal image_in_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_in_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_1_proc103_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc103_U0_start_write : STD_LOGIC;
    signal conv_layer1_U0_start_full_n : STD_LOGIC;
    signal conv_layer1_U0_start_write : STD_LOGIC;

    component Loop_1_proc103 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_in_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_in_V_V_full_n : IN STD_LOGIC;
        image_in_V_V_write : OUT STD_LOGIC );
    end component;


    component conv_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_1_proc103_U0 : component Loop_1_proc103
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_1_proc103_U0_ap_start,
        ap_done => Loop_1_proc103_U0_ap_done,
        ap_continue => Loop_1_proc103_U0_ap_continue,
        ap_idle => Loop_1_proc103_U0_ap_idle,
        ap_ready => Loop_1_proc103_U0_ap_ready,
        image_in_V_V_din => Loop_1_proc103_U0_image_in_V_V_din,
        image_in_V_V_full_n => image_in_V_V_full_n,
        image_in_V_V_write => Loop_1_proc103_U0_image_in_V_V_write);

    conv_layer1_U0 : component conv_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv_layer1_U0_ap_start,
        ap_done => conv_layer1_U0_ap_done,
        ap_continue => conv_layer1_U0_ap_continue,
        ap_idle => conv_layer1_U0_ap_idle,
        ap_ready => conv_layer1_U0_ap_ready,
        out_V_V_din => conv_layer1_U0_out_V_V_din,
        out_V_V_full_n => fc3_out_V_V_full_n,
        out_V_V_write => conv_layer1_U0_out_V_V_write,
        in_V_V_dout => image_in_V_V_dout,
        in_V_V_empty_n => image_in_V_V_empty_n,
        in_V_V_read => conv_layer1_U0_in_V_V_read);

    image_in_V_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc103_U0_image_in_V_V_din,
        if_full_n => image_in_V_V_full_n,
        if_write => Loop_1_proc103_U0_image_in_V_V_write,
        if_dout => image_in_V_V_dout,
        if_empty_n => image_in_V_V_empty_n,
        if_read => conv_layer1_U0_in_V_V_read);





    conv_layer1_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                conv_layer1_U0_ap_start <= ap_const_logic_0;
            else
                conv_layer1_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    Loop_1_proc103_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc103_U0_ap_start <= ap_start;
    Loop_1_proc103_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc103_U0_start_write <= ap_const_logic_0;
    ap_done <= conv_layer1_U0_ap_done;
    ap_idle <= (conv_layer1_U0_ap_idle and Loop_1_proc103_U0_ap_idle);
    ap_ready <= conv_layer1_U0_ap_done;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= conv_layer1_U0_ap_done;
    ap_sync_ready <= ap_sync_done;
    conv_layer1_U0_ap_continue <= ap_const_logic_1;
    conv_layer1_U0_start_full_n <= ap_const_logic_1;
    conv_layer1_U0_start_write <= ap_const_logic_0;
    fc3_out_V_V_din <= conv_layer1_U0_out_V_V_din;
    fc3_out_V_V_write <= conv_layer1_U0_out_V_V_write;
end behav;

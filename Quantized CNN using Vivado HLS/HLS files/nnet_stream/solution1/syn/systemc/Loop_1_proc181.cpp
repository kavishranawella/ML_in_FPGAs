// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_1_proc181.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_1_proc181::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_1_proc181::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Loop_1_proc181::ap_ST_fsm_state1 = "1";
const sc_lv<4> Loop_1_proc181::ap_ST_fsm_state2 = "10";
const sc_lv<4> Loop_1_proc181::ap_ST_fsm_state3 = "100";
const sc_lv<4> Loop_1_proc181::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Loop_1_proc181::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_1_proc181::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_1_proc181::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_1_proc181::ap_const_lv1_0 = "0";
const sc_lv<32> Loop_1_proc181::ap_const_lv32_2 = "10";
const sc_lv<6> Loop_1_proc181::ap_const_lv6_0 = "000000";
const sc_lv<1> Loop_1_proc181::ap_const_lv1_1 = "1";
const sc_lv<6> Loop_1_proc181::ap_const_lv6_20 = "100000";
const sc_lv<6> Loop_1_proc181::ap_const_lv6_1 = "1";
const sc_lv<5> Loop_1_proc181::ap_const_lv5_0 = "00000";
const bool Loop_1_proc181::ap_const_boolean_1 = true;

Loop_1_proc181::Loop_1_proc181(sc_module_name name) : sc_module(name), mVcdFile(0) {
    input_activations_V_s_U = new Loop_1_proc181_inbkb("input_activations_V_s_U");
    input_activations_V_s_U->clk(ap_clk);
    input_activations_V_s_U->reset(ap_rst);
    input_activations_V_s_U->address0(input_activations_V_s_address0);
    input_activations_V_s_U->ce0(input_activations_V_s_ce0);
    input_activations_V_s_U->q0(input_activations_V_s_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond46_i_i_fu_87_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond46_i_i_fu_87_p2 );

    SC_METHOD(thread_exitcond45_i_i_fu_111_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_i_i_reg_76 );

    SC_METHOD(thread_exitcond46_i_i_fu_87_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_i_reg_65 );

    SC_METHOD(thread_i_fu_93_p2);
    sensitive << ( i_0_i_i_reg_65 );

    SC_METHOD(thread_image_in_V_V_blk_n);
    sensitive << ( image_in_V_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_image_in_V_V_din);
    sensitive << ( image_in_V_V_full_n );
    sensitive << ( input_activations_V_s_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_image_in_V_V_write);
    sensitive << ( image_in_V_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_input_activations_V_s_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_142_cast_fu_132_p1 );

    SC_METHOD(thread_input_activations_V_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_fu_117_p2);
    sensitive << ( j_0_i_i_reg_76 );

    SC_METHOD(thread_tmp_141_cast_fu_107_p1);
    sensitive << ( tmp_fu_99_p3 );

    SC_METHOD(thread_tmp_142_cast_fu_132_p1);
    sensitive << ( tmp_s_fu_127_p2 );

    SC_METHOD(thread_tmp_fu_99_p3);
    sensitive << ( i_0_i_i_reg_65 );

    SC_METHOD(thread_tmp_i_cast_fu_123_p1);
    sensitive << ( j_0_i_i_reg_76 );

    SC_METHOD(thread_tmp_s_fu_127_p2);
    sensitive << ( tmp_141_cast_reg_145 );
    sensitive << ( tmp_i_cast_fu_123_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( image_in_V_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond46_i_i_fu_87_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond45_i_i_fu_111_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_1_proc181_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, image_in_V_V_din, "(port)image_in_V_V_din");
    sc_trace(mVcdFile, image_in_V_V_full_n, "(port)image_in_V_V_full_n");
    sc_trace(mVcdFile, image_in_V_V_write, "(port)image_in_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_activations_V_s_address0, "input_activations_V_s_address0");
    sc_trace(mVcdFile, input_activations_V_s_ce0, "input_activations_V_s_ce0");
    sc_trace(mVcdFile, input_activations_V_s_q0, "input_activations_V_s_q0");
    sc_trace(mVcdFile, image_in_V_V_blk_n, "image_in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_fu_93_p2, "i_fu_93_p2");
    sc_trace(mVcdFile, i_reg_140, "i_reg_140");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_141_cast_fu_107_p1, "tmp_141_cast_fu_107_p1");
    sc_trace(mVcdFile, tmp_141_cast_reg_145, "tmp_141_cast_reg_145");
    sc_trace(mVcdFile, exitcond46_i_i_fu_87_p2, "exitcond46_i_i_fu_87_p2");
    sc_trace(mVcdFile, j_fu_117_p2, "j_fu_117_p2");
    sc_trace(mVcdFile, j_reg_153, "j_reg_153");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond45_i_i_fu_111_p2, "exitcond45_i_i_fu_111_p2");
    sc_trace(mVcdFile, i_0_i_i_reg_65, "i_0_i_i_reg_65");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, j_0_i_i_reg_76, "j_0_i_i_reg_76");
    sc_trace(mVcdFile, tmp_142_cast_fu_132_p1, "tmp_142_cast_fu_132_p1");
    sc_trace(mVcdFile, tmp_fu_99_p3, "tmp_fu_99_p3");
    sc_trace(mVcdFile, tmp_i_cast_fu_123_p1, "tmp_i_cast_fu_123_p1");
    sc_trace(mVcdFile, tmp_s_fu_127_p2, "tmp_s_fu_127_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_1_proc181::~Loop_1_proc181() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete input_activations_V_s_U;
}

void Loop_1_proc181::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(exitcond46_i_i_fu_87_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond45_i_i_fu_111_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_0_i_i_reg_65 = i_reg_140.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_0_i_i_reg_65 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(exitcond46_i_i_fu_87_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_0_i_i_reg_76 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(image_in_V_V_full_n.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        j_0_i_i_reg_76 = j_reg_153.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_140 = i_fu_93_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_153 = j_fu_117_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond46_i_i_fu_87_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_141_cast_reg_145 = tmp_141_cast_fu_107_p1.read();
    }
}

void Loop_1_proc181::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_1_proc181::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_1_proc181::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_1_proc181::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_1_proc181::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_1_proc181::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond46_i_i_fu_87_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_1_proc181::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_1_proc181::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond46_i_i_fu_87_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_1_proc181::thread_exitcond45_i_i_fu_111_p2() {
    exitcond45_i_i_fu_111_p2 = (!j_0_i_i_reg_76.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_i_reg_76.read() == ap_const_lv6_20);
}

void Loop_1_proc181::thread_exitcond46_i_i_fu_87_p2() {
    exitcond46_i_i_fu_87_p2 = (!i_0_i_i_reg_65.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_65.read() == ap_const_lv6_20);
}

void Loop_1_proc181::thread_i_fu_93_p2() {
    i_fu_93_p2 = (!i_0_i_i_reg_65.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_i_i_reg_65.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void Loop_1_proc181::thread_image_in_V_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        image_in_V_V_blk_n = image_in_V_V_full_n.read();
    } else {
        image_in_V_V_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc181::thread_image_in_V_V_din() {
    image_in_V_V_din = input_activations_V_s_q0.read();
}

void Loop_1_proc181::thread_image_in_V_V_write() {
    if ((esl_seteq<1,1,1>(image_in_V_V_full_n.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        image_in_V_V_write = ap_const_logic_1;
    } else {
        image_in_V_V_write = ap_const_logic_0;
    }
}

void Loop_1_proc181::thread_input_activations_V_s_address0() {
    input_activations_V_s_address0 =  (sc_lv<10>) (tmp_142_cast_fu_132_p1.read());
}

void Loop_1_proc181::thread_input_activations_V_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_activations_V_s_ce0 = ap_const_logic_1;
    } else {
        input_activations_V_s_ce0 = ap_const_logic_0;
    }
}

void Loop_1_proc181::thread_j_fu_117_p2() {
    j_fu_117_p2 = (!j_0_i_i_reg_76.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_0_i_i_reg_76.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void Loop_1_proc181::thread_tmp_141_cast_fu_107_p1() {
    tmp_141_cast_fu_107_p1 = esl_zext<12,11>(tmp_fu_99_p3.read());
}

void Loop_1_proc181::thread_tmp_142_cast_fu_132_p1() {
    tmp_142_cast_fu_132_p1 = esl_zext<64,12>(tmp_s_fu_127_p2.read());
}

void Loop_1_proc181::thread_tmp_fu_99_p3() {
    tmp_fu_99_p3 = esl_concat<6,5>(i_0_i_i_reg_65.read(), ap_const_lv5_0);
}

void Loop_1_proc181::thread_tmp_i_cast_fu_123_p1() {
    tmp_i_cast_fu_123_p1 = esl_zext<12,6>(j_0_i_i_reg_76.read());
}

void Loop_1_proc181::thread_tmp_s_fu_127_p2() {
    tmp_s_fu_127_p2 = (!tmp_141_cast_reg_145.read().is_01() || !tmp_i_cast_fu_123_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_141_cast_reg_145.read()) + sc_biguint<12>(tmp_i_cast_fu_123_p1.read()));
}

void Loop_1_proc181::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond46_i_i_fu_87_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond45_i_i_fu_111_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(image_in_V_V_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}


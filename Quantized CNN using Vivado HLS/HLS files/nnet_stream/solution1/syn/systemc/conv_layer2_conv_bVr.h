// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __conv_layer2_conv_bVr_H__
#define __conv_layer2_conv_bVr_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_layer2_conv_bVr_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 8;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in <sc_lv<AddressWidth> > address2;
sc_core::sc_in <sc_logic> ce2;
sc_core::sc_out <sc_lv<DataWidth> > q2;
sc_core::sc_in <sc_lv<AddressWidth> > address3;
sc_core::sc_in <sc_logic> ce3;
sc_core::sc_out <sc_lv<DataWidth> > q3;
sc_core::sc_in <sc_lv<AddressWidth> > address4;
sc_core::sc_in <sc_logic> ce4;
sc_core::sc_out <sc_lv<DataWidth> > q4;
sc_core::sc_in <sc_lv<AddressWidth> > address5;
sc_core::sc_in <sc_logic> ce5;
sc_core::sc_out <sc_lv<DataWidth> > q5;
sc_core::sc_in <sc_lv<AddressWidth> > address6;
sc_core::sc_in <sc_logic> ce6;
sc_core::sc_out <sc_lv<DataWidth> > q6;
sc_core::sc_in <sc_lv<AddressWidth> > address7;
sc_core::sc_in <sc_logic> ce7;
sc_core::sc_out <sc_lv<DataWidth> > q7;
sc_core::sc_in <sc_lv<AddressWidth> > address8;
sc_core::sc_in <sc_logic> ce8;
sc_core::sc_out <sc_lv<DataWidth> > q8;
sc_core::sc_in <sc_lv<AddressWidth> > address9;
sc_core::sc_in <sc_logic> ce9;
sc_core::sc_out <sc_lv<DataWidth> > q9;
sc_core::sc_in <sc_lv<AddressWidth> > address10;
sc_core::sc_in <sc_logic> ce10;
sc_core::sc_out <sc_lv<DataWidth> > q10;
sc_core::sc_in <sc_lv<AddressWidth> > address11;
sc_core::sc_in <sc_logic> ce11;
sc_core::sc_out <sc_lv<DataWidth> > q11;
sc_core::sc_in <sc_lv<AddressWidth> > address12;
sc_core::sc_in <sc_logic> ce12;
sc_core::sc_out <sc_lv<DataWidth> > q12;
sc_core::sc_in <sc_lv<AddressWidth> > address13;
sc_core::sc_in <sc_logic> ce13;
sc_core::sc_out <sc_lv<DataWidth> > q13;
sc_core::sc_in <sc_lv<AddressWidth> > address14;
sc_core::sc_in <sc_logic> ce14;
sc_core::sc_out <sc_lv<DataWidth> > q14;
sc_core::sc_in <sc_lv<AddressWidth> > address15;
sc_core::sc_in <sc_logic> ce15;
sc_core::sc_out <sc_lv<DataWidth> > q15;
sc_core::sc_in <sc_lv<AddressWidth> > address16;
sc_core::sc_in <sc_logic> ce16;
sc_core::sc_out <sc_lv<DataWidth> > q16;
sc_core::sc_in <sc_lv<AddressWidth> > address17;
sc_core::sc_in <sc_logic> ce17;
sc_core::sc_out <sc_lv<DataWidth> > q17;
sc_core::sc_in <sc_lv<AddressWidth> > address18;
sc_core::sc_in <sc_logic> ce18;
sc_core::sc_out <sc_lv<DataWidth> > q18;
sc_core::sc_in <sc_lv<AddressWidth> > address19;
sc_core::sc_in <sc_logic> ce19;
sc_core::sc_out <sc_lv<DataWidth> > q19;
sc_core::sc_in <sc_lv<AddressWidth> > address20;
sc_core::sc_in <sc_logic> ce20;
sc_core::sc_out <sc_lv<DataWidth> > q20;
sc_core::sc_in <sc_lv<AddressWidth> > address21;
sc_core::sc_in <sc_logic> ce21;
sc_core::sc_out <sc_lv<DataWidth> > q21;
sc_core::sc_in <sc_lv<AddressWidth> > address22;
sc_core::sc_in <sc_logic> ce22;
sc_core::sc_out <sc_lv<DataWidth> > q22;
sc_core::sc_in <sc_lv<AddressWidth> > address23;
sc_core::sc_in <sc_logic> ce23;
sc_core::sc_out <sc_lv<DataWidth> > q23;
sc_core::sc_in <sc_lv<AddressWidth> > address24;
sc_core::sc_in <sc_logic> ce24;
sc_core::sc_out <sc_lv<DataWidth> > q24;
sc_core::sc_in <sc_lv<AddressWidth> > address25;
sc_core::sc_in <sc_logic> ce25;
sc_core::sc_out <sc_lv<DataWidth> > q25;
sc_core::sc_in <sc_lv<AddressWidth> > address26;
sc_core::sc_in <sc_logic> ce26;
sc_core::sc_out <sc_lv<DataWidth> > q26;
sc_core::sc_in <sc_lv<AddressWidth> > address27;
sc_core::sc_in <sc_logic> ce27;
sc_core::sc_out <sc_lv<DataWidth> > q27;
sc_core::sc_in <sc_lv<AddressWidth> > address28;
sc_core::sc_in <sc_logic> ce28;
sc_core::sc_out <sc_lv<DataWidth> > q28;
sc_core::sc_in <sc_lv<AddressWidth> > address29;
sc_core::sc_in <sc_logic> ce29;
sc_core::sc_out <sc_lv<DataWidth> > q29;
sc_core::sc_in <sc_lv<AddressWidth> > address30;
sc_core::sc_in <sc_logic> ce30;
sc_core::sc_out <sc_lv<DataWidth> > q30;
sc_core::sc_in <sc_lv<AddressWidth> > address31;
sc_core::sc_in <sc_logic> ce31;
sc_core::sc_out <sc_lv<DataWidth> > q31;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_layer2_conv_bVr_ram) {
        ram[0] = "0b11111111";
        ram[1] = "0b01000110";
        ram[2] = "0b11101100";
        ram[3] = "0b11000110";
        ram[4] = "0b10101000";
        ram[5] = "0b11100001";
        ram[6] = "0b11101010";
        ram[7] = "0b01001000";
        ram[8] = "0b10001111";
        ram[9] = "0b01011000";
        ram[10] = "0b10001110";
        ram[11] = "0b11111010";
        ram[12] = "0b00001101";
        ram[13] = "0b01110000";
        ram[14] = "0b11001110";
        ram[15] = "0b00100001";
        ram[16] = "0b10110011";
        ram[17] = "0b00101011";
        ram[18] = "0b11010111";
        ram[19] = "0b00100100";
        ram[20] = "0b00101010";
        ram[21] = "0b00101001";
        ram[22] = "0b00110000";
        ram[23] = "0b11001011";
        ram[24] = "0b01100000";
        ram[25] = "0b11110001";
        ram[26] = "0b11010111";
        ram[27] = "0b11001111";
        ram[28] = "0b00101000";
        ram[29] = "0b10110001";
        ram[30] = "0b00000000";
        ram[31] = "0b01111111";
        ram[32] = "0b11001100";
        ram[33] = "0b11000111";
        ram[34] = "0b10101101";
        ram[35] = "0b01001111";
        ram[36] = "0b10001010";
        ram[37] = "0b01001111";
        ram[38] = "0b10110101";
        ram[39] = "0b00101111";
        ram[40] = "0b01010010";
        ram[41] = "0b00011111";
        ram[42] = "0b00101011";
        ram[43] = "0b10110110";
        ram[44] = "0b10000001";
        ram[45] = "0b11011000";
        ram[46] = "0b10010000";
        ram[47] = "0b11100110";
        ram[48] = "0b01001000";
        ram[49] = "0b00111001";
        ram[50] = "0b11101111";
        ram[51] = "0b10110000";
        ram[52] = "0b00001011";
        ram[53] = "0b00101011";
        ram[54] = "0b00110110";
        ram[55] = "0b11010001";
        ram[56] = "0b01011001";
        ram[57] = "0b10000110";
        ram[58] = "0b00011100";
        ram[59] = "0b11011001";
        ram[60] = "0b01010100";
        ram[61] = "0b11010110";
        ram[62] = "0b11101111";
        ram[63] = "0b00110100";
        ram[64] = "0b00001000";
        ram[65] = "0b11100001";
        ram[66] = "0b01010011";
        ram[67] = "0b11111010";
        ram[68] = "0b00100000";
        ram[69] = "0b11011000";
        ram[70] = "0b01000011";
        ram[71] = "0b10001110";
        ram[72] = "0b10000001";
        ram[73] = "0b01111111";
        ram[74] = "0b00101011";
        ram[75] = "0b11110110";
        ram[76] = "0b01101011";
        ram[77] = "0b11110101";
        ram[78] = "0b11110100";
        ram[79] = "0b11101110";
        ram[80] = "0b11101111";
        ram[81] = "0b11111011";
        ram[82] = "0b11011111";
        ram[83] = "0b00110001";
        ram[84] = "0b01010111";
        ram[85] = "0b00001101";
        ram[86] = "0b01100000";
        ram[87] = "0b11001011";
        ram[88] = "0b00101100";
        ram[89] = "0b01011010";
        ram[90] = "0b10011101";
        ram[91] = "0b10101001";
        ram[92] = "0b11011101";
        ram[93] = "0b11101100";
        ram[94] = "0b00100001";
        ram[95] = "0b00100010";
        ram[96] = "0b11011111";
        ram[97] = "0b11001001";
        ram[98] = "0b01101100";
        ram[99] = "0b10101101";
        ram[100] = "0b00100011";
        ram[101] = "0b01001011";
        ram[102] = "0b00100011";
        ram[103] = "0b01101000";
        ram[104] = "0b10000001";
        ram[105] = "0b11100110";
        ram[106] = "0b11101001";
        ram[107] = "0b00110111";
        ram[108] = "0b10001100";
        ram[109] = "0b00110110";
        ram[110] = "0b10100011";
        ram[111] = "0b10100111";
        ram[112] = "0b00101110";
        ram[113] = "0b10111110";
        ram[114] = "0b01011010";
        ram[115] = "0b00110001";
        ram[116] = "0b11001001";
        ram[117] = "0b10111010";
        ram[118] = "0b01000000";
        ram[119] = "0b10000011";
        ram[120] = "0b11011010";
        ram[121] = "0b00110101";
        ram[122] = "0b11001010";
        ram[123] = "0b00100000";
        ram[124] = "0b01010100";
        ram[125] = "0b10110001";
        ram[126] = "0b10001100";
        ram[127] = "0b11001100";
        ram[128] = "0b10101100";
        ram[129] = "0b01010101";
        ram[130] = "0b01111111";
        ram[131] = "0b00110011";
        ram[132] = "0b10101101";
        ram[133] = "0b01100110";
        ram[134] = "0b00010011";
        ram[135] = "0b11011100";
        ram[136] = "0b11000001";
        ram[137] = "0b01000000";
        ram[138] = "0b00000000";
        ram[139] = "0b11101111";
        ram[140] = "0b10011001";
        ram[141] = "0b11010010";
        ram[142] = "0b01001000";
        ram[143] = "0b10110100";
        ram[144] = "0b10010011";
        ram[145] = "0b11111101";
        ram[146] = "0b00110010";
        ram[147] = "0b01001101";
        ram[148] = "0b00111110";
        ram[149] = "0b11111001";
        ram[150] = "0b00001111";
        ram[151] = "0b10000001";
        ram[152] = "0b01011000";
        ram[153] = "0b00010000";
        ram[154] = "0b01010000";
        ram[155] = "0b10101010";
        ram[156] = "0b11100101";
        ram[157] = "0b10111000";
        ram[158] = "0b01010110";
        ram[159] = "0b00110111";
        ram[160] = "0b11010111";
        ram[161] = "0b00011000";
        ram[162] = "0b10100111";
        ram[163] = "0b00010110";
        ram[164] = "0b10010011";
        ram[165] = "0b11010110";
        ram[166] = "0b11111011";
        ram[167] = "0b11100111";
        ram[168] = "0b11011000";
        ram[169] = "0b00101101";
        ram[170] = "0b00001110";
        ram[171] = "0b10001100";
        ram[172] = "0b11111101";
        ram[173] = "0b11000111";
        ram[174] = "0b00100111";
        ram[175] = "0b11101000";
        ram[176] = "0b01001101";
        ram[177] = "0b00011000";
        ram[178] = "0b00001100";
        ram[179] = "0b11010000";
        ram[180] = "0b00110101";
        ram[181] = "0b00010111";
        ram[182] = "0b11000011";
        ram[183] = "0b00011100";
        ram[184] = "0b01100011";
        ram[185] = "0b00000110";
        ram[186] = "0b00001000";
        ram[187] = "0b00110110";
        ram[188] = "0b01001001";
        ram[189] = "0b01111111";
        ram[190] = "0b10111110";
        ram[191] = "0b11000100";
        ram[192] = "0b11000100";
        ram[193] = "0b10001101";
        ram[194] = "0b01100110";
        ram[195] = "0b01010001";
        ram[196] = "0b11000101";
        ram[197] = "0b11011011";
        ram[198] = "0b10100001";
        ram[199] = "0b11100101";
        ram[200] = "0b11010001";
        ram[201] = "0b10000001";
        ram[202] = "0b10010100";
        ram[203] = "0b01001001";
        ram[204] = "0b11100101";
        ram[205] = "0b01011000";
        ram[206] = "0b01110010";
        ram[207] = "0b00011111";
        ram[208] = "0b00001001";
        ram[209] = "0b00001101";
        ram[210] = "0b01001000";
        ram[211] = "0b00001001";
        ram[212] = "0b00011000";
        ram[213] = "0b01000110";
        ram[214] = "0b01100000";
        ram[215] = "0b10101001";
        ram[216] = "0b10110011";
        ram[217] = "0b11111001";
        ram[218] = "0b01011101";
        ram[219] = "0b01011111";
        ram[220] = "0b10010001";
        ram[221] = "0b01010110";
        ram[222] = "0b00010011";
        ram[223] = "0b11110111";
        ram[224] = "0b11000110";
        ram[225] = "0b00011100";
        ram[226] = "0b10111010";
        ram[227] = "0b11010001";
        ram[228] = "0b11111111";
        ram[229] = "0b00010010";
        ram[230] = "0b00111011";
        ram[231] = "0b01100000";
        ram[232] = "0b00101000";
        ram[233] = "0b00000101";
        ram[234] = "0b11110000";
        ram[235] = "0b10011011";
        ram[236] = "0b00111100";
        ram[237] = "0b00011101";
        ram[238] = "0b01011000";
        ram[239] = "0b00101100";
        ram[240] = "0b01000010";
        ram[241] = "0b00010000";
        ram[242] = "0b11011011";
        ram[243] = "0b11001011";
        ram[244] = "0b01100111";
        ram[245] = "0b10111110";
        ram[246] = "0b00101111";
        ram[247] = "0b00111001";
        ram[248] = "0b01000110";
        ram[249] = "0b10110001";
        ram[250] = "0b00001101";
        ram[251] = "0b10111011";
        ram[252] = "0b00111100";
        ram[253] = "0b10000001";
        ram[254] = "0b00101000";
        ram[255] = "0b00110101";
        ram[256] = "0b11111001";
        ram[257] = "0b11111111";
        ram[258] = "0b10001101";
        ram[259] = "0b01010110";
        ram[260] = "0b11010110";
        ram[261] = "0b00000110";
        ram[262] = "0b00110111";
        ram[263] = "0b10100001";
        ram[264] = "0b11101110";
        ram[265] = "0b11011001";
        ram[266] = "0b01111110";
        ram[267] = "0b00111001";
        ram[268] = "0b00000111";
        ram[269] = "0b11111110";
        ram[270] = "0b10010010";
        ram[271] = "0b11100101";
        ram[272] = "0b00101111";
        ram[273] = "0b10011110";
        ram[274] = "0b11010100";
        ram[275] = "0b00111100";
        ram[276] = "0b01001001";
        ram[277] = "0b01110100";
        ram[278] = "0b00000110";
        ram[279] = "0b10111100";
        ram[280] = "0b10101001";
        ram[281] = "0b10100001";
        ram[282] = "0b00101100";
        ram[283] = "0b10011000";
        ram[284] = "0b01000010";
        ram[285] = "0b11111010";
        ram[286] = "0b01010011";
        ram[287] = "0b01111111";
        ram[288] = "0b11000100";
        ram[289] = "0b11011001";
        ram[290] = "0b01010101";
        ram[291] = "0b10000111";
        ram[292] = "0b00001001";
        ram[293] = "0b11100011";
        ram[294] = "0b10111111";
        ram[295] = "0b11011001";
        ram[296] = "0b01011011";
        ram[297] = "0b01111111";
        ram[298] = "0b10011001";
        ram[299] = "0b10111010";
        ram[300] = "0b01110110";
        ram[301] = "0b11111111";
        ram[302] = "0b01011001";
        ram[303] = "0b11100110";
        ram[304] = "0b11101000";
        ram[305] = "0b01010001";
        ram[306] = "0b11000011";
        ram[307] = "0b11000001";
        ram[308] = "0b11011001";
        ram[309] = "0b01000000";
        ram[310] = "0b11110000";
        ram[311] = "0b10001010";
        ram[312] = "0b00001011";
        ram[313] = "0b00010101";
        ram[314] = "0b01001001";
        ram[315] = "0b11010010";
        ram[316] = "0b01001101";
        ram[317] = "0b01001011";
        ram[318] = "0b10011101";
        ram[319] = "0b00000110";
        ram[320] = "0b00111101";
        ram[321] = "0b11011110";
        ram[322] = "0b00100001";
        ram[323] = "0b00101001";
        ram[324] = "0b11010011";
        ram[325] = "0b11100100";
        ram[326] = "0b01000000";
        ram[327] = "0b01000110";
        ram[328] = "0b00110001";
        ram[329] = "0b11001001";
        ram[330] = "0b11010110";
        ram[331] = "0b00101000";
        ram[332] = "0b00010101";
        ram[333] = "0b10000001";
        ram[334] = "0b11100011";
        ram[335] = "0b10110100";
        ram[336] = "0b11010001";
        ram[337] = "0b00011011";
        ram[338] = "0b00011110";
        ram[339] = "0b00100110";
        ram[340] = "0b11010011";
        ram[341] = "0b11100001";
        ram[342] = "0b11000010";
        ram[343] = "0b00100011";
        ram[344] = "0b00101000";
        ram[345] = "0b00011011";
        ram[346] = "0b10101001";
        ram[347] = "0b00011110";
        ram[348] = "0b10101010";
        ram[349] = "0b10101100";
        ram[350] = "0b00010010";
        ram[351] = "0b01001000";
        ram[352] = "0b10011100";
        ram[353] = "0b11011101";
        ram[354] = "0b11111000";
        ram[355] = "0b10100001";
        ram[356] = "0b10000001";
        ram[357] = "0b11100011";
        ram[358] = "0b00001010";
        ram[359] = "0b01000111";
        ram[360] = "0b01100011";
        ram[361] = "0b11010101";
        ram[362] = "0b01000110";
        ram[363] = "0b00110010";
        ram[364] = "0b10101101";
        ram[365] = "0b01011000";
        ram[366] = "0b01000010";
        ram[367] = "0b00101000";
        ram[368] = "0b11110100";
        ram[369] = "0b01011010";
        ram[370] = "0b11011010";
        ram[371] = "0b10011100";
        ram[372] = "0b11101001";
        ram[373] = "0b11011000";
        ram[374] = "0b10010100";
        ram[375] = "0b10001110";
        ram[376] = "0b00010011";
        ram[377] = "0b00101100";
        ram[378] = "0b00110101";
        ram[379] = "0b10001111";
        ram[380] = "0b00010101";
        ram[381] = "0b10101001";
        ram[382] = "0b01000001";
        ram[383] = "0b11000001";
        ram[384] = "0b10010111";
        ram[385] = "0b11011011";
        ram[386] = "0b10000001";
        ram[387] = "0b00101000";
        ram[388] = "0b00000111";
        ram[389] = "0b01010111";
        ram[390] = "0b11110011";
        ram[391] = "0b00111100";
        ram[392] = "0b11010000";
        ram[393] = "0b00101110";
        ram[394] = "0b10001101";
        ram[395] = "0b00100110";
        ram[396] = "0b11100010";
        ram[397] = "0b01011111";
        ram[398] = "0b01000100";
        ram[399] = "0b11110001";
        ram[400] = "0b11001100";
        ram[401] = "0b11100101";
        ram[402] = "0b00111110";
        ram[403] = "0b00110100";
        ram[404] = "0b00101110";
        ram[405] = "0b00001001";
        ram[406] = "0b01000100";
        ram[407] = "0b00111001";
        ram[408] = "0b01000101";
        ram[409] = "0b00010110";
        ram[410] = "0b10100111";
        ram[411] = "0b01010100";
        ram[412] = "0b00000111";
        ram[413] = "0b11101101";
        ram[414] = "0b11101001";
        ram[415] = "0b10011010";
        ram[416] = "0b01011011";
        ram[417] = "0b01010111";
        ram[418] = "0b10111100";
        ram[419] = "0b01110100";
        ram[420] = "0b11100010";
        ram[421] = "0b00000101";
        ram[422] = "0b11001010";
        ram[423] = "0b00100100";
        ram[424] = "0b01010100";
        ram[425] = "0b01010010";
        ram[426] = "0b11110101";
        ram[427] = "0b00110011";
        ram[428] = "0b01011100";
        ram[429] = "0b10101100";
        ram[430] = "0b10000001";
        ram[431] = "0b11110110";
        ram[432] = "0b10000101";
        ram[433] = "0b11000000";
        ram[434] = "0b00001110";
        ram[435] = "0b00110100";
        ram[436] = "0b00000100";
        ram[437] = "0b00011110";
        ram[438] = "0b00100010";
        ram[439] = "0b11010101";
        ram[440] = "0b10101000";
        ram[441] = "0b11111010";
        ram[442] = "0b11001001";
        ram[443] = "0b01010011";
        ram[444] = "0b10110111";
        ram[445] = "0b01000101";
        ram[446] = "0b01001110";
        ram[447] = "0b11111011";
        ram[448] = "0b10111110";
        ram[449] = "0b10110011";
        ram[450] = "0b01001000";
        ram[451] = "0b00001010";
        ram[452] = "0b00100001";
        ram[453] = "0b11101001";
        ram[454] = "0b11011110";
        ram[455] = "0b10010111";
        ram[456] = "0b01010100";
        ram[457] = "0b10001010";
        ram[458] = "0b10010111";
        ram[459] = "0b10111101";
        ram[460] = "0b01010100";
        ram[461] = "0b10101011";
        ram[462] = "0b11011111";
        ram[463] = "0b00001001";
        ram[464] = "0b11111011";
        ram[465] = "0b10000001";
        ram[466] = "0b01011011";
        ram[467] = "0b10111101";
        ram[468] = "0b10100000";
        ram[469] = "0b10001101";
        ram[470] = "0b00100100";
        ram[471] = "0b00000110";
        ram[472] = "0b11101001";
        ram[473] = "0b01011011";
        ram[474] = "0b11000001";
        ram[475] = "0b10011100";
        ram[476] = "0b01010111";
        ram[477] = "0b00110010";
        ram[478] = "0b01010000";
        ram[479] = "0b01101011";
        ram[480] = "0b00000011";
        ram[481] = "0b10101010";
        ram[482] = "0b01111101";
        ram[483] = "0b11110110";
        ram[484] = "0b11101100";
        ram[485] = "0b11001000";
        ram[486] = "0b01100100";
        ram[487] = "0b10111010";
        ram[488] = "0b00000010";
        ram[489] = "0b10011000";
        ram[490] = "0b10111101";
        ram[491] = "0b01100101";
        ram[492] = "0b11100110";
        ram[493] = "0b10110011";
        ram[494] = "0b11110110";
        ram[495] = "0b10101111";
        ram[496] = "0b00110010";
        ram[497] = "0b11111101";
        ram[498] = "0b00110001";
        ram[499] = "0b01010011";
        ram[500] = "0b01010010";
        ram[501] = "0b10000001";
        ram[502] = "0b00100011";
        ram[503] = "0b11001100";
        ram[504] = "0b01111100";
        ram[505] = "0b11010100";
        ram[506] = "0b00001110";
        ram[507] = "0b00111100";
        ram[508] = "0b11100001";
        ram[509] = "0b10100110";
        ram[510] = "0b01111000";
        ram[511] = "0b10100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();


SC_METHOD(prc_write_2);
  sensitive<<clk.pos();


SC_METHOD(prc_write_3);
  sensitive<<clk.pos();


SC_METHOD(prc_write_4);
  sensitive<<clk.pos();


SC_METHOD(prc_write_5);
  sensitive<<clk.pos();


SC_METHOD(prc_write_6);
  sensitive<<clk.pos();


SC_METHOD(prc_write_7);
  sensitive<<clk.pos();


SC_METHOD(prc_write_8);
  sensitive<<clk.pos();


SC_METHOD(prc_write_9);
  sensitive<<clk.pos();


SC_METHOD(prc_write_10);
  sensitive<<clk.pos();


SC_METHOD(prc_write_11);
  sensitive<<clk.pos();


SC_METHOD(prc_write_12);
  sensitive<<clk.pos();


SC_METHOD(prc_write_13);
  sensitive<<clk.pos();


SC_METHOD(prc_write_14);
  sensitive<<clk.pos();


SC_METHOD(prc_write_15);
  sensitive<<clk.pos();


SC_METHOD(prc_write_16);
  sensitive<<clk.pos();


SC_METHOD(prc_write_17);
  sensitive<<clk.pos();


SC_METHOD(prc_write_18);
  sensitive<<clk.pos();


SC_METHOD(prc_write_19);
  sensitive<<clk.pos();


SC_METHOD(prc_write_20);
  sensitive<<clk.pos();


SC_METHOD(prc_write_21);
  sensitive<<clk.pos();


SC_METHOD(prc_write_22);
  sensitive<<clk.pos();


SC_METHOD(prc_write_23);
  sensitive<<clk.pos();


SC_METHOD(prc_write_24);
  sensitive<<clk.pos();


SC_METHOD(prc_write_25);
  sensitive<<clk.pos();


SC_METHOD(prc_write_26);
  sensitive<<clk.pos();


SC_METHOD(prc_write_27);
  sensitive<<clk.pos();


SC_METHOD(prc_write_28);
  sensitive<<clk.pos();


SC_METHOD(prc_write_29);
  sensitive<<clk.pos();


SC_METHOD(prc_write_30);
  sensitive<<clk.pos();


SC_METHOD(prc_write_31);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


void prc_write_2()
{
    if (ce2.read() == sc_dt::Log_1) 
    {
            if(address2.read().is_01() && address2.read().to_uint()<AddressRange)
              q2 = ram[address2.read().to_uint()];
            else
              q2 = sc_lv<DataWidth>();
    }
}


void prc_write_3()
{
    if (ce3.read() == sc_dt::Log_1) 
    {
            if(address3.read().is_01() && address3.read().to_uint()<AddressRange)
              q3 = ram[address3.read().to_uint()];
            else
              q3 = sc_lv<DataWidth>();
    }
}


void prc_write_4()
{
    if (ce4.read() == sc_dt::Log_1) 
    {
            if(address4.read().is_01() && address4.read().to_uint()<AddressRange)
              q4 = ram[address4.read().to_uint()];
            else
              q4 = sc_lv<DataWidth>();
    }
}


void prc_write_5()
{
    if (ce5.read() == sc_dt::Log_1) 
    {
            if(address5.read().is_01() && address5.read().to_uint()<AddressRange)
              q5 = ram[address5.read().to_uint()];
            else
              q5 = sc_lv<DataWidth>();
    }
}


void prc_write_6()
{
    if (ce6.read() == sc_dt::Log_1) 
    {
            if(address6.read().is_01() && address6.read().to_uint()<AddressRange)
              q6 = ram[address6.read().to_uint()];
            else
              q6 = sc_lv<DataWidth>();
    }
}


void prc_write_7()
{
    if (ce7.read() == sc_dt::Log_1) 
    {
            if(address7.read().is_01() && address7.read().to_uint()<AddressRange)
              q7 = ram[address7.read().to_uint()];
            else
              q7 = sc_lv<DataWidth>();
    }
}


void prc_write_8()
{
    if (ce8.read() == sc_dt::Log_1) 
    {
            if(address8.read().is_01() && address8.read().to_uint()<AddressRange)
              q8 = ram[address8.read().to_uint()];
            else
              q8 = sc_lv<DataWidth>();
    }
}


void prc_write_9()
{
    if (ce9.read() == sc_dt::Log_1) 
    {
            if(address9.read().is_01() && address9.read().to_uint()<AddressRange)
              q9 = ram[address9.read().to_uint()];
            else
              q9 = sc_lv<DataWidth>();
    }
}


void prc_write_10()
{
    if (ce10.read() == sc_dt::Log_1) 
    {
            if(address10.read().is_01() && address10.read().to_uint()<AddressRange)
              q10 = ram[address10.read().to_uint()];
            else
              q10 = sc_lv<DataWidth>();
    }
}


void prc_write_11()
{
    if (ce11.read() == sc_dt::Log_1) 
    {
            if(address11.read().is_01() && address11.read().to_uint()<AddressRange)
              q11 = ram[address11.read().to_uint()];
            else
              q11 = sc_lv<DataWidth>();
    }
}


void prc_write_12()
{
    if (ce12.read() == sc_dt::Log_1) 
    {
            if(address12.read().is_01() && address12.read().to_uint()<AddressRange)
              q12 = ram[address12.read().to_uint()];
            else
              q12 = sc_lv<DataWidth>();
    }
}


void prc_write_13()
{
    if (ce13.read() == sc_dt::Log_1) 
    {
            if(address13.read().is_01() && address13.read().to_uint()<AddressRange)
              q13 = ram[address13.read().to_uint()];
            else
              q13 = sc_lv<DataWidth>();
    }
}


void prc_write_14()
{
    if (ce14.read() == sc_dt::Log_1) 
    {
            if(address14.read().is_01() && address14.read().to_uint()<AddressRange)
              q14 = ram[address14.read().to_uint()];
            else
              q14 = sc_lv<DataWidth>();
    }
}


void prc_write_15()
{
    if (ce15.read() == sc_dt::Log_1) 
    {
            if(address15.read().is_01() && address15.read().to_uint()<AddressRange)
              q15 = ram[address15.read().to_uint()];
            else
              q15 = sc_lv<DataWidth>();
    }
}


void prc_write_16()
{
    if (ce16.read() == sc_dt::Log_1) 
    {
            if(address16.read().is_01() && address16.read().to_uint()<AddressRange)
              q16 = ram[address16.read().to_uint()];
            else
              q16 = sc_lv<DataWidth>();
    }
}


void prc_write_17()
{
    if (ce17.read() == sc_dt::Log_1) 
    {
            if(address17.read().is_01() && address17.read().to_uint()<AddressRange)
              q17 = ram[address17.read().to_uint()];
            else
              q17 = sc_lv<DataWidth>();
    }
}


void prc_write_18()
{
    if (ce18.read() == sc_dt::Log_1) 
    {
            if(address18.read().is_01() && address18.read().to_uint()<AddressRange)
              q18 = ram[address18.read().to_uint()];
            else
              q18 = sc_lv<DataWidth>();
    }
}


void prc_write_19()
{
    if (ce19.read() == sc_dt::Log_1) 
    {
            if(address19.read().is_01() && address19.read().to_uint()<AddressRange)
              q19 = ram[address19.read().to_uint()];
            else
              q19 = sc_lv<DataWidth>();
    }
}


void prc_write_20()
{
    if (ce20.read() == sc_dt::Log_1) 
    {
            if(address20.read().is_01() && address20.read().to_uint()<AddressRange)
              q20 = ram[address20.read().to_uint()];
            else
              q20 = sc_lv<DataWidth>();
    }
}


void prc_write_21()
{
    if (ce21.read() == sc_dt::Log_1) 
    {
            if(address21.read().is_01() && address21.read().to_uint()<AddressRange)
              q21 = ram[address21.read().to_uint()];
            else
              q21 = sc_lv<DataWidth>();
    }
}


void prc_write_22()
{
    if (ce22.read() == sc_dt::Log_1) 
    {
            if(address22.read().is_01() && address22.read().to_uint()<AddressRange)
              q22 = ram[address22.read().to_uint()];
            else
              q22 = sc_lv<DataWidth>();
    }
}


void prc_write_23()
{
    if (ce23.read() == sc_dt::Log_1) 
    {
            if(address23.read().is_01() && address23.read().to_uint()<AddressRange)
              q23 = ram[address23.read().to_uint()];
            else
              q23 = sc_lv<DataWidth>();
    }
}


void prc_write_24()
{
    if (ce24.read() == sc_dt::Log_1) 
    {
            if(address24.read().is_01() && address24.read().to_uint()<AddressRange)
              q24 = ram[address24.read().to_uint()];
            else
              q24 = sc_lv<DataWidth>();
    }
}


void prc_write_25()
{
    if (ce25.read() == sc_dt::Log_1) 
    {
            if(address25.read().is_01() && address25.read().to_uint()<AddressRange)
              q25 = ram[address25.read().to_uint()];
            else
              q25 = sc_lv<DataWidth>();
    }
}


void prc_write_26()
{
    if (ce26.read() == sc_dt::Log_1) 
    {
            if(address26.read().is_01() && address26.read().to_uint()<AddressRange)
              q26 = ram[address26.read().to_uint()];
            else
              q26 = sc_lv<DataWidth>();
    }
}


void prc_write_27()
{
    if (ce27.read() == sc_dt::Log_1) 
    {
            if(address27.read().is_01() && address27.read().to_uint()<AddressRange)
              q27 = ram[address27.read().to_uint()];
            else
              q27 = sc_lv<DataWidth>();
    }
}


void prc_write_28()
{
    if (ce28.read() == sc_dt::Log_1) 
    {
            if(address28.read().is_01() && address28.read().to_uint()<AddressRange)
              q28 = ram[address28.read().to_uint()];
            else
              q28 = sc_lv<DataWidth>();
    }
}


void prc_write_29()
{
    if (ce29.read() == sc_dt::Log_1) 
    {
            if(address29.read().is_01() && address29.read().to_uint()<AddressRange)
              q29 = ram[address29.read().to_uint()];
            else
              q29 = sc_lv<DataWidth>();
    }
}


void prc_write_30()
{
    if (ce30.read() == sc_dt::Log_1) 
    {
            if(address30.read().is_01() && address30.read().to_uint()<AddressRange)
              q30 = ram[address30.read().to_uint()];
            else
              q30 = sc_lv<DataWidth>();
    }
}


void prc_write_31()
{
    if (ce31.read() == sc_dt::Log_1) 
    {
            if(address31.read().is_01() && address31.read().to_uint()<AddressRange)
              q31 = ram[address31.read().to_uint()];
            else
              q31 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_layer2_conv_bVr) {


static const unsigned DataWidth = 8;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in <sc_lv<AddressWidth> > address2;
sc_core::sc_in<sc_logic> ce2;
sc_core::sc_out <sc_lv<DataWidth> > q2;
sc_core::sc_in <sc_lv<AddressWidth> > address3;
sc_core::sc_in<sc_logic> ce3;
sc_core::sc_out <sc_lv<DataWidth> > q3;
sc_core::sc_in <sc_lv<AddressWidth> > address4;
sc_core::sc_in<sc_logic> ce4;
sc_core::sc_out <sc_lv<DataWidth> > q4;
sc_core::sc_in <sc_lv<AddressWidth> > address5;
sc_core::sc_in<sc_logic> ce5;
sc_core::sc_out <sc_lv<DataWidth> > q5;
sc_core::sc_in <sc_lv<AddressWidth> > address6;
sc_core::sc_in<sc_logic> ce6;
sc_core::sc_out <sc_lv<DataWidth> > q6;
sc_core::sc_in <sc_lv<AddressWidth> > address7;
sc_core::sc_in<sc_logic> ce7;
sc_core::sc_out <sc_lv<DataWidth> > q7;
sc_core::sc_in <sc_lv<AddressWidth> > address8;
sc_core::sc_in<sc_logic> ce8;
sc_core::sc_out <sc_lv<DataWidth> > q8;
sc_core::sc_in <sc_lv<AddressWidth> > address9;
sc_core::sc_in<sc_logic> ce9;
sc_core::sc_out <sc_lv<DataWidth> > q9;
sc_core::sc_in <sc_lv<AddressWidth> > address10;
sc_core::sc_in<sc_logic> ce10;
sc_core::sc_out <sc_lv<DataWidth> > q10;
sc_core::sc_in <sc_lv<AddressWidth> > address11;
sc_core::sc_in<sc_logic> ce11;
sc_core::sc_out <sc_lv<DataWidth> > q11;
sc_core::sc_in <sc_lv<AddressWidth> > address12;
sc_core::sc_in<sc_logic> ce12;
sc_core::sc_out <sc_lv<DataWidth> > q12;
sc_core::sc_in <sc_lv<AddressWidth> > address13;
sc_core::sc_in<sc_logic> ce13;
sc_core::sc_out <sc_lv<DataWidth> > q13;
sc_core::sc_in <sc_lv<AddressWidth> > address14;
sc_core::sc_in<sc_logic> ce14;
sc_core::sc_out <sc_lv<DataWidth> > q14;
sc_core::sc_in <sc_lv<AddressWidth> > address15;
sc_core::sc_in<sc_logic> ce15;
sc_core::sc_out <sc_lv<DataWidth> > q15;
sc_core::sc_in <sc_lv<AddressWidth> > address16;
sc_core::sc_in<sc_logic> ce16;
sc_core::sc_out <sc_lv<DataWidth> > q16;
sc_core::sc_in <sc_lv<AddressWidth> > address17;
sc_core::sc_in<sc_logic> ce17;
sc_core::sc_out <sc_lv<DataWidth> > q17;
sc_core::sc_in <sc_lv<AddressWidth> > address18;
sc_core::sc_in<sc_logic> ce18;
sc_core::sc_out <sc_lv<DataWidth> > q18;
sc_core::sc_in <sc_lv<AddressWidth> > address19;
sc_core::sc_in<sc_logic> ce19;
sc_core::sc_out <sc_lv<DataWidth> > q19;
sc_core::sc_in <sc_lv<AddressWidth> > address20;
sc_core::sc_in<sc_logic> ce20;
sc_core::sc_out <sc_lv<DataWidth> > q20;
sc_core::sc_in <sc_lv<AddressWidth> > address21;
sc_core::sc_in<sc_logic> ce21;
sc_core::sc_out <sc_lv<DataWidth> > q21;
sc_core::sc_in <sc_lv<AddressWidth> > address22;
sc_core::sc_in<sc_logic> ce22;
sc_core::sc_out <sc_lv<DataWidth> > q22;
sc_core::sc_in <sc_lv<AddressWidth> > address23;
sc_core::sc_in<sc_logic> ce23;
sc_core::sc_out <sc_lv<DataWidth> > q23;
sc_core::sc_in <sc_lv<AddressWidth> > address24;
sc_core::sc_in<sc_logic> ce24;
sc_core::sc_out <sc_lv<DataWidth> > q24;
sc_core::sc_in <sc_lv<AddressWidth> > address25;
sc_core::sc_in<sc_logic> ce25;
sc_core::sc_out <sc_lv<DataWidth> > q25;
sc_core::sc_in <sc_lv<AddressWidth> > address26;
sc_core::sc_in<sc_logic> ce26;
sc_core::sc_out <sc_lv<DataWidth> > q26;
sc_core::sc_in <sc_lv<AddressWidth> > address27;
sc_core::sc_in<sc_logic> ce27;
sc_core::sc_out <sc_lv<DataWidth> > q27;
sc_core::sc_in <sc_lv<AddressWidth> > address28;
sc_core::sc_in<sc_logic> ce28;
sc_core::sc_out <sc_lv<DataWidth> > q28;
sc_core::sc_in <sc_lv<AddressWidth> > address29;
sc_core::sc_in<sc_logic> ce29;
sc_core::sc_out <sc_lv<DataWidth> > q29;
sc_core::sc_in <sc_lv<AddressWidth> > address30;
sc_core::sc_in<sc_logic> ce30;
sc_core::sc_out <sc_lv<DataWidth> > q30;
sc_core::sc_in <sc_lv<AddressWidth> > address31;
sc_core::sc_in<sc_logic> ce31;
sc_core::sc_out <sc_lv<DataWidth> > q31;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_layer2_conv_bVr_ram* meminst;


SC_CTOR(conv_layer2_conv_bVr) {
meminst = new conv_layer2_conv_bVr_ram("conv_layer2_conv_bVr_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->address2(address2);
meminst->ce2(ce2);
meminst->q2(q2);

meminst->address3(address3);
meminst->ce3(ce3);
meminst->q3(q3);

meminst->address4(address4);
meminst->ce4(ce4);
meminst->q4(q4);

meminst->address5(address5);
meminst->ce5(ce5);
meminst->q5(q5);

meminst->address6(address6);
meminst->ce6(ce6);
meminst->q6(q6);

meminst->address7(address7);
meminst->ce7(ce7);
meminst->q7(q7);

meminst->address8(address8);
meminst->ce8(ce8);
meminst->q8(q8);

meminst->address9(address9);
meminst->ce9(ce9);
meminst->q9(q9);

meminst->address10(address10);
meminst->ce10(ce10);
meminst->q10(q10);

meminst->address11(address11);
meminst->ce11(ce11);
meminst->q11(q11);

meminst->address12(address12);
meminst->ce12(ce12);
meminst->q12(q12);

meminst->address13(address13);
meminst->ce13(ce13);
meminst->q13(q13);

meminst->address14(address14);
meminst->ce14(ce14);
meminst->q14(q14);

meminst->address15(address15);
meminst->ce15(ce15);
meminst->q15(q15);

meminst->address16(address16);
meminst->ce16(ce16);
meminst->q16(q16);

meminst->address17(address17);
meminst->ce17(ce17);
meminst->q17(q17);

meminst->address18(address18);
meminst->ce18(ce18);
meminst->q18(q18);

meminst->address19(address19);
meminst->ce19(ce19);
meminst->q19(q19);

meminst->address20(address20);
meminst->ce20(ce20);
meminst->q20(q20);

meminst->address21(address21);
meminst->ce21(ce21);
meminst->q21(q21);

meminst->address22(address22);
meminst->ce22(ce22);
meminst->q22(q22);

meminst->address23(address23);
meminst->ce23(ce23);
meminst->q23(q23);

meminst->address24(address24);
meminst->ce24(ce24);
meminst->q24(q24);

meminst->address25(address25);
meminst->ce25(ce25);
meminst->q25(q25);

meminst->address26(address26);
meminst->ce26(ce26);
meminst->q26(q26);

meminst->address27(address27);
meminst->ce27(ce27);
meminst->q27(q27);

meminst->address28(address28);
meminst->ce28(ce28);
meminst->q28(q28);

meminst->address29(address29);
meminst->ce29(ce29);
meminst->q29(q29);

meminst->address30(address30);
meminst->ce30(ce30);
meminst->q30(q30);

meminst->address31(address31);
meminst->ce31(ce31);
meminst->q31(q31);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_layer2_conv_bVr() {
    delete meminst;
}


};//endmodule
#endif

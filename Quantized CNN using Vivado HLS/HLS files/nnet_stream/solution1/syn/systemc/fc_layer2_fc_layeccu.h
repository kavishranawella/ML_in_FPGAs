// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __fc_layer2_fc_layeccu_H__
#define __fc_layer2_fc_layeccu_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct fc_layer2_fc_layeccu_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 11;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(fc_layer2_fc_layeccu_ram) {
        ram[0] = "0b11110000010";
        ram[1] = "0b11010001110";
        ram[2] = "0b11111010001";
        ram[3] = "0b11011000101";
        ram[4] = "0b00000110010";
        ram[5] = "0b11111010000";
        ram[6] = "0b00001001111";
        ram[7] = "0b11111111100";
        ram[8] = "0b11111101111";
        ram[9] = "0b11110101100";
        ram[10] = "0b11110010110";
        ram[11] = "0b11101110110";
        ram[12] = "0b11110100101";
        ram[13] = "0b11001010110";
        ram[14] = "0b11101111111";
        ram[15] = "0b11100001010";
        ram[16] = "0b11110011000";
        ram[17] = "0b00001100101";
        ram[18] = "0b00010010100";
        ram[19] = "0b00001010011";
        ram[20] = "0b00101100000";
        ram[21] = "0b11111101110";
        ram[22] = "0b11011110010";
        ram[23] = "0b11100001011";
        ram[24] = "0b11110001100";
        ram[25] = "0b00010111110";
        ram[26] = "0b11110011000";
        ram[27] = "0b11101110101";
        ram[28] = "0b11110001000";
        ram[29] = "0b00000101101";
        ram[30] = "0b11111101110";
        ram[31] = "0b11111000111";
        ram[32] = "0b11110000110";
        ram[33] = "0b00011001011";
        ram[34] = "0b11111011001";
        ram[35] = "0b11110100010";
        ram[36] = "0b00000000000";
        ram[37] = "0b00001000100";
        ram[38] = "0b11101010110";
        ram[39] = "0b11011011010";
        ram[40] = "0b11111000011";
        ram[41] = "0b11001010000";
        ram[42] = "0b11001011100";
        ram[43] = "0b11001011111";
        ram[44] = "0b10111110101";
        ram[45] = "0b11101100011";
        ram[46] = "0b11100100101";
        ram[47] = "0b11111000100";
        ram[48] = "0b11101100000";
        ram[49] = "0b11110011111";
        ram[50] = "0b00000101011";
        ram[51] = "0b11100001001";
        ram[52] = "0b00010000011";
        ram[53] = "0b00010001100";
        ram[54] = "0b11111101111";
        ram[55] = "0b11011110011";
        ram[56] = "0b11111011101";
        ram[57] = "0b00010010001";
        ram[58] = "0b00100011000";
        ram[59] = "0b11000101011";
        ram[60] = "0b11001110110";
        ram[61] = "0b11011000110";
        ram[62] = "0b11010011010";
        ram[63] = "0b11110010011";
        ram[64] = "0b00101000011";
        ram[65] = "0b11111011101";
        ram[66] = "0b00001111111";
        ram[67] = "0b11101000000";
        ram[68] = "0b00010111110";
        ram[69] = "0b00001110001";
        ram[70] = "0b11111001100";
        ram[71] = "0b11000110110";
        ram[72] = "0b00010010110";
        ram[73] = "0b11100001100";
        ram[74] = "0b11110101011";
        ram[75] = "0b11101011011";
        ram[76] = "0b11101101011";
        ram[77] = "0b00001011000";
        ram[78] = "0b00010000111";
        ram[79] = "0b11110001101";
        ram[80] = "0b00001011000";
        ram[81] = "0b11110111011";
        ram[82] = "0b11000011100";
        ram[83] = "0b11011010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(fc_layer2_fc_layeccu) {


static const unsigned DataWidth = 11;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


fc_layer2_fc_layeccu_ram* meminst;


SC_CTOR(fc_layer2_fc_layeccu) {
meminst = new fc_layer2_fc_layeccu_ram("fc_layer2_fc_layeccu_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~fc_layer2_fc_layeccu() {
    delete meminst;
}


};//endmodule
#endif

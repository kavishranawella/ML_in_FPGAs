// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_V_write;
reg in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] fc_layer2_weights_V_address0;
reg    fc_layer2_weights_V_ce0;
wire  signed [7:0] fc_layer2_weights_V_q0;
reg   [13:0] fc_layer2_weights_V_address1;
reg    fc_layer2_weights_V_ce1;
wire  signed [7:0] fc_layer2_weights_V_q1;
wire   [6:0] fc_layer2_bias_V_address0;
reg    fc_layer2_bias_V_ce0;
wire   [10:0] fc_layer2_bias_V_q0;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_state12;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond4_fu_407_p2;
wire  signed [16:0] read_temp_V_cast_fu_337_p1;
reg  signed [16:0] read_temp_V_cast_reg_949;
reg    ap_block_state1;
wire   [6:0] i_4_fu_347_p2;
reg   [6:0] i_4_reg_957;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3_fu_341_p2;
wire   [14:0] tmp_5_cast_fu_423_p1;
reg   [14:0] tmp_5_cast_reg_970;
reg    ap_block_state4;
wire  signed [16:0] p_6_cast_fu_427_p1;
reg  signed [16:0] p_6_cast_reg_978;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_431_p2;
reg   [6:0] output_V_addr_7_reg_994;
reg   [6:0] output_V_addr_8_reg_1005;
wire   [6:0] j_2_fu_533_p2;
wire  signed [23:0] grp_fu_910_p3;
reg  signed [23:0] tmp_3_reg_1016;
wire    ap_CS_fsm_state6;
wire  signed [23:0] grp_fu_917_p3;
reg  signed [23:0] tmp_77_1_reg_1021;
reg   [6:0] output_V_addr_9_reg_1031;
reg   [6:0] output_V_addr_10_reg_1041;
wire   [6:0] i_7_3_fu_649_p2;
reg   [6:0] i_7_3_reg_1046;
wire  signed [23:0] grp_fu_924_p3;
reg  signed [23:0] tmp_77_2_reg_1051;
wire    ap_CS_fsm_state7;
wire  signed [23:0] grp_fu_931_p3;
reg  signed [23:0] tmp_77_3_reg_1056;
wire   [6:0] i_5_fu_669_p2;
reg   [6:0] i_5_reg_1064;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_663_p2;
wire   [42:0] p_Val2_s_fu_685_p2;
reg   [42:0] p_Val2_s_reg_1079;
wire    ap_CS_fsm_state10;
reg  signed [10:0] f_op_V_2_reg_1084;
wire   [7:0] tmp_42_fu_782_p1;
reg   [7:0] tmp_42_reg_1089;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1094;
reg   [15:0] tmp_12_reg_1100;
reg   [6:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [23:0] output_V_d0;
wire   [23:0] output_V_q0;
reg   [6:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [23:0] output_V_d1;
wire   [23:0] output_V_q1;
reg   [6:0] i_reg_280;
wire    ap_CS_fsm_state3;
reg   [6:0] j_reg_292;
reg   [6:0] i1_reg_304;
wire    ap_CS_fsm_state8;
reg   [6:0] i2_reg_316;
wire  signed [63:0] tmp_21_cast_fu_383_p1;
wire   [63:0] tmp_s_fu_388_p1;
wire  signed [63:0] tmp_25_cast_fu_477_p1;
wire   [63:0] tmp_2_fu_437_p1;
wire  signed [63:0] tmp_29_cast_fu_528_p1;
wire   [63:0] tmp_76_1_fu_488_p1;
wire  signed [63:0] tmp_33_cast_fu_593_p1;
wire   [63:0] tmp_76_2_fu_553_p1;
wire  signed [63:0] tmp_37_cast_fu_644_p1;
wire   [63:0] tmp_76_3_fu_604_p1;
wire   [63:0] tmp_6_fu_675_p1;
wire  signed [23:0] p_5_cast_fu_402_p1;
wire  signed [7:0] lhs_V_fu_327_p0;
wire  signed [8:0] lhs_V_fu_327_p1;
wire   [8:0] r_V_fu_331_p2;
wire   [13:0] tmp_18_fu_353_p3;
wire   [9:0] tmp_19_fu_365_p3;
wire   [14:0] p_shl_cast_fu_361_p1;
wire   [14:0] p_shl1_cast_fu_373_p1;
wire   [14:0] tmp_20_fu_377_p2;
wire  signed [7:0] p_5_fu_397_p0;
wire  signed [8:0] p_5_fu_397_p1;
wire   [16:0] p_5_fu_397_p2;
wire  signed [8:0] lhs_V_2_fu_413_p1;
wire   [8:0] r_V_2_fu_417_p2;
wire   [13:0] tmp_21_fu_442_p3;
wire   [9:0] tmp_22_fu_454_p3;
wire   [14:0] p_shl8_cast_fu_450_p1;
wire   [14:0] p_shl9_cast_fu_462_p1;
wire   [14:0] tmp_23_fu_466_p2;
wire   [14:0] tmp_24_fu_472_p2;
wire   [6:0] i_7_s_fu_482_p2;
wire   [13:0] tmp_25_fu_493_p3;
wire   [9:0] tmp_26_fu_505_p3;
wire   [14:0] p_shl6_cast_fu_501_p1;
wire   [14:0] p_shl7_cast_fu_513_p1;
wire   [14:0] tmp_27_fu_517_p2;
wire   [14:0] tmp_28_fu_523_p2;
wire   [6:0] i_7_1_fu_547_p2;
wire   [13:0] tmp_29_fu_558_p3;
wire   [9:0] tmp_30_fu_570_p3;
wire   [14:0] p_shl4_cast_fu_566_p1;
wire   [14:0] p_shl5_cast_fu_578_p1;
wire   [14:0] tmp_31_fu_582_p2;
wire   [14:0] tmp_32_fu_588_p2;
wire   [6:0] i_7_2_fu_598_p2;
wire   [13:0] tmp_33_fu_609_p3;
wire   [9:0] tmp_34_fu_621_p3;
wire   [14:0] p_shl2_cast_fu_617_p1;
wire   [14:0] p_shl3_cast_fu_629_p1;
wire   [14:0] tmp_35_fu_633_p2;
wire   [14:0] tmp_36_fu_639_p2;
wire  signed [23:0] p_Val2_s_fu_685_p1;
wire  signed [42:0] grp_fu_938_p3;
wire   [14:0] tmp_11_fu_701_p4;
wire   [26:0] tmp_40_fu_721_p1;
wire   [0:0] tmp_38_fu_694_p3;
wire   [0:0] r_fu_724_p2;
wire   [0:0] not_s_i_i2_fu_730_p2;
wire   [0:0] r_i_i2_fu_736_p2;
wire   [0:0] qbit_fu_714_p3;
wire   [0:0] qb_assign_2_fu_742_p2;
wire   [15:0] tmp_8_cast_fu_748_p1;
wire  signed [15:0] p_Val2_7_cast_fu_710_p1;
wire   [15:0] p_Val2_6_fu_752_p2;
wire   [0:0] tmp_41_fu_758_p3;
wire  signed [15:0] p_a_V_i_fu_766_p3;
wire  signed [22:0] p_a_V_i_cast1_fu_774_p1;
wire   [23:0] p_a_V_i_cast_fu_778_p1;
wire   [23:0] r_V_4_fu_786_p2;
wire   [7:0] p_Val2_8_fu_810_p2;
wire   [0:0] newsignbit_fu_815_p3;
wire   [0:0] p_not_i_i_fu_823_p2;
wire   [0:0] brmerge_i_i_fu_828_p2;
wire   [0:0] tmp_1_fu_834_p2;
wire   [0:0] p_not38_i_i_fu_851_p2;
wire   [0:0] newsignbit_0_not_i_i_fu_845_p2;
wire   [0:0] brmerge39_i_i_fu_856_p2;
wire   [0:0] underflow_fu_862_p2;
wire   [0:0] overflow_fu_839_p2;
wire   [0:0] underflow_not_fu_873_p2;
wire   [0:0] brmerge_i_i_i_fu_867_p2;
wire   [0:0] brmerge_fu_879_p2;
wire   [7:0] p_Val2_23_mux_fu_885_p3;
wire   [7:0] p_Val2_s_518_fu_893_p3;
wire  signed [8:0] grp_fu_910_p1;
wire  signed [8:0] grp_fu_917_p1;
wire  signed [8:0] grp_fu_924_p1;
wire  signed [8:0] grp_fu_931_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
end

fc_layer2_fc_layecbu #(
    .DataWidth( 8 ),
    .AddressRange( 10080 ),
    .AddressWidth( 14 ))
fc_layer2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer2_weights_V_address0),
    .ce0(fc_layer2_weights_V_ce0),
    .q0(fc_layer2_weights_V_q0),
    .address1(fc_layer2_weights_V_address1),
    .ce1(fc_layer2_weights_V_ce1),
    .q1(fc_layer2_weights_V_q1)
);

fc_layer2_fc_layeccu #(
    .DataWidth( 11 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer2_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer2_bias_V_address0),
    .ce0(fc_layer2_bias_V_ce0),
    .q0(fc_layer2_bias_V_q0)
);

fc_layer2_output_V #(
    .DataWidth( 24 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(output_V_d1),
    .q1(output_V_q1)
);

nnet_mac_muladd_8b9t #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
nnet_mac_muladd_8b9t_U68(
    .din0(fc_layer2_weights_V_q0),
    .din1(grp_fu_910_p1),
    .din2(output_V_q0),
    .dout(grp_fu_910_p3)
);

nnet_mac_muladd_8b9t #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
nnet_mac_muladd_8b9t_U69(
    .din0(fc_layer2_weights_V_q1),
    .din1(grp_fu_917_p1),
    .din2(output_V_q1),
    .dout(grp_fu_917_p3)
);

nnet_mac_muladd_8b9t #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
nnet_mac_muladd_8b9t_U70(
    .din0(fc_layer2_weights_V_q0),
    .din1(grp_fu_924_p1),
    .din2(output_V_q1),
    .dout(grp_fu_924_p3)
);

nnet_mac_muladd_8b9t #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
nnet_mac_muladd_8b9t_U71(
    .din0(fc_layer2_weights_V_q1),
    .din1(grp_fu_931_p1),
    .din2(output_V_q0),
    .dout(grp_fu_931_p3)
);

nnet_mac_muladd_3cdu #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 43 ),
    .dout_WIDTH( 43 ))
nnet_mac_muladd_3cdu_U72(
    .din0(31'd516613),
    .din1(f_op_V_2_reg_1084),
    .din2(p_Val2_s_reg_1079),
    .dout(grp_fu_938_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_663_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_reg_304 <= i_7_3_reg_1046;
    end else if ((~((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond4_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i1_reg_304 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond4_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_reg_316 <= 7'd0;
    end else if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        i2_reg_316 <= i_5_reg_1064;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_280 <= i_4_reg_957;
    end else if ((~((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_280 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_292 <= 7'd1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_431_p2 == 1'd1))) begin
        j_reg_292 <= j_2_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        f_op_V_2_reg_1084 <= fc_layer2_bias_V_q0;
        p_Val2_s_reg_1079 <= p_Val2_s_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_957 <= i_4_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_5_reg_1064 <= i_5_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_7_3_reg_1046 <= i_7_3_fu_649_p2;
        output_V_addr_10_reg_1041[6 : 2] <= tmp_76_3_fu_604_p1[6 : 2];
        output_V_addr_9_reg_1031[0] <= tmp_76_2_fu_553_p1[0];
output_V_addr_9_reg_1031[6 : 2] <= tmp_76_2_fu_553_p1[6 : 2];
        tmp_3_reg_1016 <= grp_fu_910_p3;
        tmp_77_1_reg_1021 <= grp_fu_917_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        isneg_reg_1094 <= r_V_4_fu_786_p2[32'd23];
        tmp_12_reg_1100 <= {{r_V_4_fu_786_p2[23:8]}};
        tmp_42_reg_1089 <= tmp_42_fu_782_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_V_addr_7_reg_994 <= tmp_2_fu_437_p1;
        output_V_addr_8_reg_1005[6 : 1] <= tmp_76_1_fu_488_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond4_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_6_cast_reg_978 <= p_6_cast_fu_427_p1;
        tmp_5_cast_reg_970[6 : 0] <= tmp_5_cast_fu_423_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        read_temp_V_cast_reg_949 <= read_temp_V_cast_fu_337_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_77_2_reg_1051 <= grp_fu_924_p3;
        tmp_77_3_reg_1056 <= grp_fu_931_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_663_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_663_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fc_layer2_bias_V_ce0 = 1'b1;
    end else begin
        fc_layer2_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fc_layer2_weights_V_address0 = tmp_33_cast_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fc_layer2_weights_V_address0 = tmp_25_cast_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fc_layer2_weights_V_address0 = tmp_21_cast_fu_383_p1;
    end else begin
        fc_layer2_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fc_layer2_weights_V_address1 = tmp_37_cast_fu_644_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fc_layer2_weights_V_address1 = tmp_29_cast_fu_528_p1;
    end else begin
        fc_layer2_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        fc_layer2_weights_V_ce0 = 1'b1;
    end else begin
        fc_layer2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        fc_layer2_weights_V_ce1 = 1'b1;
    end else begin
        fc_layer2_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond4_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond4_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_address0 = output_V_addr_10_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address0 = output_V_addr_8_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address0 = tmp_76_3_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address0 = tmp_2_fu_437_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address0 = tmp_s_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_address0 = 64'd0;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_address1 = tmp_6_fu_675_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_address1 = output_V_addr_9_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address1 = output_V_addr_7_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address1 = tmp_76_2_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address1 = tmp_76_1_fu_488_p1;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_d0 = tmp_77_3_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_d0 = tmp_77_1_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_d0 = p_5_cast_fu_402_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_d0 = 24'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_d1 = tmp_77_2_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_d1 = tmp_3_reg_1016;
    end else begin
        output_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (~((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if ((~((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond4_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond4_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_431_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_663_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((in_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((exitcond4_fu_407_p2 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign brmerge39_i_i_fu_856_p2 = (p_not38_i_i_fu_851_p2 | newsignbit_0_not_i_i_fu_845_p2);

assign brmerge_fu_879_p2 = (underflow_not_fu_873_p2 | overflow_fu_839_p2);

assign brmerge_i_i_fu_828_p2 = (p_not_i_i_fu_823_p2 | newsignbit_fu_815_p3);

assign brmerge_i_i_i_fu_867_p2 = (underflow_fu_862_p2 | overflow_fu_839_p2);

assign exitcond1_fu_431_p2 = ((i1_reg_304 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond3_fu_341_p2 = ((i_reg_280 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond4_fu_407_p2 = ((j_reg_292 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_663_p2 = ((i2_reg_316 == 7'd84) ? 1'b1 : 1'b0);

assign fc_layer2_bias_V_address0 = tmp_6_fu_675_p1;

assign grp_fu_910_p1 = p_6_cast_reg_978;

assign grp_fu_917_p1 = p_6_cast_reg_978;

assign grp_fu_924_p1 = p_6_cast_reg_978;

assign grp_fu_931_p1 = p_6_cast_reg_978;

assign i_4_fu_347_p2 = (i_reg_280 + 7'd1);

assign i_5_fu_669_p2 = (i2_reg_316 + 7'd1);

assign i_7_1_fu_547_p2 = (i1_reg_304 | 7'd2);

assign i_7_2_fu_598_p2 = (i1_reg_304 | 7'd3);

assign i_7_3_fu_649_p2 = (i1_reg_304 + 7'd4);

assign i_7_s_fu_482_p2 = (i1_reg_304 | 7'd1);

assign j_2_fu_533_p2 = (j_reg_292 + 7'd1);

assign lhs_V_2_fu_413_p1 = $signed(in_V_V_dout);

assign lhs_V_fu_327_p0 = in_V_V_dout;

assign lhs_V_fu_327_p1 = lhs_V_fu_327_p0;

assign newsignbit_0_not_i_i_fu_845_p2 = (newsignbit_fu_815_p3 ^ 1'd1);

assign newsignbit_fu_815_p3 = p_Val2_8_fu_810_p2[32'd7];

assign not_s_i_i2_fu_730_p2 = (tmp_38_fu_694_p3 ^ 1'd1);

assign out_V_V_din = ((brmerge_fu_879_p2[0:0] === 1'b1) ? p_Val2_23_mux_fu_885_p3 : p_Val2_s_518_fu_893_p3);

assign overflow_fu_839_p2 = (tmp_1_fu_834_p2 & brmerge_i_i_fu_828_p2);

assign p_5_cast_fu_402_p1 = $signed(p_5_fu_397_p2);

assign p_5_fu_397_p0 = fc_layer2_weights_V_q0;

assign p_5_fu_397_p1 = read_temp_V_cast_reg_949;

assign p_5_fu_397_p2 = ($signed(p_5_fu_397_p0) * $signed(p_5_fu_397_p1));

assign p_6_cast_fu_427_p1 = $signed(r_V_2_fu_417_p2);

assign p_Val2_23_mux_fu_885_p3 = ((brmerge_i_i_i_fu_867_p2[0:0] === 1'b1) ? 8'd127 : p_Val2_8_fu_810_p2);

assign p_Val2_6_fu_752_p2 = ($signed(tmp_8_cast_fu_748_p1) + $signed(p_Val2_7_cast_fu_710_p1));

assign p_Val2_7_cast_fu_710_p1 = $signed(tmp_11_fu_701_p4);

assign p_Val2_8_fu_810_p2 = ($signed(8'd254) + $signed(tmp_42_reg_1089));

assign p_Val2_s_518_fu_893_p3 = ((underflow_fu_862_p2[0:0] === 1'b1) ? 8'd128 : p_Val2_8_fu_810_p2);

assign p_Val2_s_fu_685_p1 = output_V_q1;

assign p_Val2_s_fu_685_p2 = ($signed({{1'b0}, {43'd516625}}) * $signed(p_Val2_s_fu_685_p1));

assign p_a_V_i_cast1_fu_774_p1 = p_a_V_i_fu_766_p3;

assign p_a_V_i_cast_fu_778_p1 = $unsigned(p_a_V_i_cast1_fu_774_p1);

assign p_a_V_i_fu_766_p3 = ((tmp_41_fu_758_p3[0:0] === 1'b1) ? 16'd0 : p_Val2_6_fu_752_p2);

assign p_not38_i_i_fu_851_p2 = ((tmp_12_reg_1100 != 16'd65535) ? 1'b1 : 1'b0);

assign p_not_i_i_fu_823_p2 = ((tmp_12_reg_1100 != 16'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_373_p1 = tmp_19_fu_365_p3;

assign p_shl2_cast_fu_617_p1 = tmp_33_fu_609_p3;

assign p_shl3_cast_fu_629_p1 = tmp_34_fu_621_p3;

assign p_shl4_cast_fu_566_p1 = tmp_29_fu_558_p3;

assign p_shl5_cast_fu_578_p1 = tmp_30_fu_570_p3;

assign p_shl6_cast_fu_501_p1 = tmp_25_fu_493_p3;

assign p_shl7_cast_fu_513_p1 = tmp_26_fu_505_p3;

assign p_shl8_cast_fu_450_p1 = tmp_21_fu_442_p3;

assign p_shl9_cast_fu_462_p1 = tmp_22_fu_454_p3;

assign p_shl_cast_fu_361_p1 = tmp_18_fu_353_p3;

assign qb_assign_2_fu_742_p2 = (r_i_i2_fu_736_p2 & qbit_fu_714_p3);

assign qbit_fu_714_p3 = grp_fu_938_p3[32'd27];

assign r_V_2_fu_417_p2 = ($signed(lhs_V_2_fu_413_p1) + $signed(9'd2));

assign r_V_4_fu_786_p2 = ($signed(24'd16777214) + $signed(p_a_V_i_cast_fu_778_p1));

assign r_V_fu_331_p2 = ($signed(lhs_V_fu_327_p1) + $signed(9'd2));

assign r_fu_724_p2 = ((tmp_40_fu_721_p1 != 27'd0) ? 1'b1 : 1'b0);

assign r_i_i2_fu_736_p2 = (r_fu_724_p2 | not_s_i_i2_fu_730_p2);

assign read_temp_V_cast_fu_337_p1 = $signed(r_V_fu_331_p2);

assign tmp_11_fu_701_p4 = {{grp_fu_938_p3[42:28]}};

assign tmp_18_fu_353_p3 = {{i_reg_280}, {7'd0}};

assign tmp_19_fu_365_p3 = {{i_reg_280}, {3'd0}};

assign tmp_1_fu_834_p2 = (isneg_reg_1094 ^ 1'd1);

assign tmp_20_fu_377_p2 = (p_shl_cast_fu_361_p1 - p_shl1_cast_fu_373_p1);

assign tmp_21_cast_fu_383_p1 = $signed(tmp_20_fu_377_p2);

assign tmp_21_fu_442_p3 = {{i1_reg_304}, {7'd0}};

assign tmp_22_fu_454_p3 = {{i1_reg_304}, {3'd0}};

assign tmp_23_fu_466_p2 = (p_shl8_cast_fu_450_p1 - p_shl9_cast_fu_462_p1);

assign tmp_24_fu_472_p2 = (tmp_23_fu_466_p2 + tmp_5_cast_reg_970);

assign tmp_25_cast_fu_477_p1 = $signed(tmp_24_fu_472_p2);

assign tmp_25_fu_493_p3 = {{i_7_s_fu_482_p2}, {7'd0}};

assign tmp_26_fu_505_p3 = {{i_7_s_fu_482_p2}, {3'd0}};

assign tmp_27_fu_517_p2 = (p_shl6_cast_fu_501_p1 - p_shl7_cast_fu_513_p1);

assign tmp_28_fu_523_p2 = (tmp_27_fu_517_p2 + tmp_5_cast_reg_970);

assign tmp_29_cast_fu_528_p1 = $signed(tmp_28_fu_523_p2);

assign tmp_29_fu_558_p3 = {{i_7_1_fu_547_p2}, {7'd0}};

assign tmp_2_fu_437_p1 = i1_reg_304;

assign tmp_30_fu_570_p3 = {{i_7_1_fu_547_p2}, {3'd0}};

assign tmp_31_fu_582_p2 = (p_shl4_cast_fu_566_p1 - p_shl5_cast_fu_578_p1);

assign tmp_32_fu_588_p2 = (tmp_31_fu_582_p2 + tmp_5_cast_reg_970);

assign tmp_33_cast_fu_593_p1 = $signed(tmp_32_fu_588_p2);

assign tmp_33_fu_609_p3 = {{i_7_2_fu_598_p2}, {7'd0}};

assign tmp_34_fu_621_p3 = {{i_7_2_fu_598_p2}, {3'd0}};

assign tmp_35_fu_633_p2 = (p_shl2_cast_fu_617_p1 - p_shl3_cast_fu_629_p1);

assign tmp_36_fu_639_p2 = (tmp_35_fu_633_p2 + tmp_5_cast_reg_970);

assign tmp_37_cast_fu_644_p1 = $signed(tmp_36_fu_639_p2);

assign tmp_38_fu_694_p3 = grp_fu_938_p3[32'd42];

assign tmp_40_fu_721_p1 = grp_fu_938_p3[26:0];

assign tmp_41_fu_758_p3 = p_Val2_6_fu_752_p2[32'd15];

assign tmp_42_fu_782_p1 = p_a_V_i_fu_766_p3[7:0];

assign tmp_5_cast_fu_423_p1 = j_reg_292;

assign tmp_6_fu_675_p1 = i2_reg_316;

assign tmp_76_1_fu_488_p1 = i_7_s_fu_482_p2;

assign tmp_76_2_fu_553_p1 = i_7_1_fu_547_p2;

assign tmp_76_3_fu_604_p1 = i_7_2_fu_598_p2;

assign tmp_8_cast_fu_748_p1 = qb_assign_2_fu_742_p2;

assign tmp_s_fu_388_p1 = i_reg_280;

assign underflow_fu_862_p2 = (isneg_reg_1094 & brmerge39_i_i_fu_856_p2);

assign underflow_not_fu_873_p2 = (underflow_fu_862_p2 ^ 1'd1);

always @ (posedge ap_clk) begin
    tmp_5_cast_reg_970[14:7] <= 8'b00000000;
    output_V_addr_8_reg_1005[0] <= 1'b1;
    output_V_addr_9_reg_1031[1] <= 1'b1;
    output_V_addr_10_reg_1041[1:0] <= 2'b11;
end

endmodule //fc_layer2

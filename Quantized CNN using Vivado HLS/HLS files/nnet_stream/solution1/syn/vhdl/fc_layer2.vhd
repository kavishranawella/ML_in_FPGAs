-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of fc_layer2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv43_7E211 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001111110001000010001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_FFFFFE : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv31_7E205 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001111110001000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer2_weights_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc_layer2_weights_V_ce0 : STD_LOGIC;
    signal fc_layer2_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_layer2_weights_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc_layer2_weights_V_ce1 : STD_LOGIC;
    signal fc_layer2_weights_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_layer2_bias_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc_layer2_bias_V_ce0 : STD_LOGIC;
    signal fc_layer2_bias_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond4_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_temp_V_cast_fu_337_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal read_temp_V_cast_reg_949 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_4_fu_347_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_957 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_423_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_cast_reg_970 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal p_6_cast_fu_427_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_6_cast_reg_978 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_7_reg_994 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_8_reg_1005 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_533_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_910_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_reg_1016 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_917_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_77_1_reg_1021 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_addr_9_reg_1031 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_10_reg_1041 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_3_fu_649_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_3_reg_1046 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_924_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_77_2_reg_1051 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_931_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_77_3_reg_1056 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_5_fu_669_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_1064 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_685_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_s_reg_1079 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal f_op_V_2_reg_1084 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1094 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1100 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal output_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_280 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_292 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_reg_304 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i2_reg_316 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_cast_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_1_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_2_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_3_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_5_cast_fu_402_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_V_fu_327_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_353_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_fu_365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_361_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_fu_373_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_fu_377_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_5_fu_397_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_5_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_5_fu_397_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_fu_413_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_442_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_454_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_cast_fu_450_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_462_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_fu_466_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_fu_472_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_7_s_fu_482_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_493_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_505_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_501_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_cast_fu_513_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_517_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_523_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_7_1_fu_547_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_558_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_570_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_566_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_578_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_fu_582_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_32_fu_588_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_7_2_fu_598_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_609_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_34_fu_621_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_617_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_629_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_35_fu_633_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_36_fu_639_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_s_fu_685_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_938_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_11_fu_701_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_40_fu_721_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_38_fu_694_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_i_i2_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i2_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_748_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_cast_fu_710_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_752_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_758_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_a_V_i_fu_766_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_a_V_i_cast1_fu_774_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_a_V_i_cast_fu_778_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_fu_786_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_8_fu_810_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_815_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_23_mux_fu_885_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_518_fu_893_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_910_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_917_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_924_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_931_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component nnet_mac_muladd_8b9t IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnet_mac_muladd_3cdu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (42 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component fc_layer2_fc_layecbu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fc_layer2_fc_layeccu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component fc_layer2_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    fc_layer2_weights_V_U : component fc_layer2_fc_layecbu
    generic map (
        DataWidth => 8,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer2_weights_V_address0,
        ce0 => fc_layer2_weights_V_ce0,
        q0 => fc_layer2_weights_V_q0,
        address1 => fc_layer2_weights_V_address1,
        ce1 => fc_layer2_weights_V_ce1,
        q1 => fc_layer2_weights_V_q1);

    fc_layer2_bias_V_U : component fc_layer2_fc_layeccu
    generic map (
        DataWidth => 11,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer2_bias_V_address0,
        ce0 => fc_layer2_bias_V_ce0,
        q0 => fc_layer2_bias_V_q0);

    output_V_U : component fc_layer2_output_V
    generic map (
        DataWidth => 24,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => output_V_d1,
        q1 => output_V_q1);

    nnet_mac_muladd_8b9t_U68 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer2_weights_V_q0,
        din1 => grp_fu_910_p1,
        din2 => output_V_q0,
        dout => grp_fu_910_p3);

    nnet_mac_muladd_8b9t_U69 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer2_weights_V_q1,
        din1 => grp_fu_917_p1,
        din2 => output_V_q1,
        dout => grp_fu_917_p3);

    nnet_mac_muladd_8b9t_U70 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer2_weights_V_q0,
        din1 => grp_fu_924_p1,
        din2 => output_V_q1,
        dout => grp_fu_924_p3);

    nnet_mac_muladd_8b9t_U71 : component nnet_mac_muladd_8b9t
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => fc_layer2_weights_V_q1,
        din1 => grp_fu_931_p1,
        din2 => output_V_q0,
        dout => grp_fu_931_p3);

    nnet_mac_muladd_3cdu_U72 : component nnet_mac_muladd_3cdu
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 11,
        din2_WIDTH => 43,
        dout_WIDTH => 43)
    port map (
        din0 => ap_const_lv31_7E205,
        din1 => f_op_V_2_reg_1084,
        din2 => p_Val2_s_reg_1079,
        dout => grp_fu_938_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_663_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i1_reg_304 <= i_7_3_reg_1046;
            elsif ((not(((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_reg_304 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i2_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_reg_316 <= ap_const_lv7_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i2_reg_316 <= i_5_reg_1064;
            end if; 
        end if;
    end process;

    i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_280 <= i_4_reg_957;
            elsif ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_280 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_292 <= ap_const_lv7_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_431_p2 = ap_const_lv1_1))) then 
                j_reg_292 <= j_2_fu_533_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                f_op_V_2_reg_1084 <= fc_layer2_bias_V_q0;
                p_Val2_s_reg_1079 <= p_Val2_s_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_957 <= i_4_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_5_reg_1064 <= i_5_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_3_reg_1046 <= i_7_3_fu_649_p2;
                    output_V_addr_10_reg_1041(6 downto 2) <= tmp_76_3_fu_604_p1(7 - 1 downto 0)(6 downto 2);
                    output_V_addr_9_reg_1031(0) <= tmp_76_2_fu_553_p1(7 - 1 downto 0)(0);    output_V_addr_9_reg_1031(6 downto 2) <= tmp_76_2_fu_553_p1(7 - 1 downto 0)(6 downto 2);
                tmp_3_reg_1016 <= grp_fu_910_p3;
                tmp_77_1_reg_1021 <= grp_fu_917_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                isneg_reg_1094 <= r_V_4_fu_786_p2(23 downto 23);
                tmp_12_reg_1100 <= r_V_4_fu_786_p2(23 downto 8);
                tmp_42_reg_1089 <= tmp_42_fu_782_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                output_V_addr_7_reg_994 <= tmp_2_fu_437_p1(7 - 1 downto 0);
                    output_V_addr_8_reg_1005(6 downto 1) <= tmp_76_1_fu_488_p1(7 - 1 downto 0)(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_6_cast_reg_978 <= p_6_cast_fu_427_p1;
                    tmp_5_cast_reg_970(6 downto 0) <= tmp_5_cast_fu_423_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                read_temp_V_cast_reg_949 <= read_temp_V_cast_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_77_2_reg_1051 <= grp_fu_924_p3;
                tmp_77_3_reg_1056 <= grp_fu_931_p3;
            end if;
        end if;
    end process;
    tmp_5_cast_reg_970(14 downto 7) <= "00000000";
    output_V_addr_8_reg_1005(0) <= '1';
    output_V_addr_9_reg_1031(1) <= '1';
    output_V_addr_10_reg_1041(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state12, ap_CS_fsm_state4, exitcond4_fu_407_p2, ap_CS_fsm_state2, exitcond3_fu_341_p2, ap_CS_fsm_state5, exitcond1_fu_431_p2, ap_CS_fsm_state9, exitcond_fu_663_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if ((not(((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_431_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_663_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_V_V_empty_n)
    begin
                ap_block_state1 <= ((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(in_V_V_empty_n, exitcond4_fu_407_p2)
    begin
                ap_block_state4 <= ((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, exitcond_fu_663_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_663_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_663_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_663_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge39_i_i_fu_856_p2 <= (p_not38_i_i_fu_851_p2 or newsignbit_0_not_i_i_fu_845_p2);
    brmerge_fu_879_p2 <= (underflow_not_fu_873_p2 or overflow_fu_839_p2);
    brmerge_i_i_fu_828_p2 <= (p_not_i_i_fu_823_p2 or newsignbit_fu_815_p3);
    brmerge_i_i_i_fu_867_p2 <= (underflow_fu_862_p2 or overflow_fu_839_p2);
    exitcond1_fu_431_p2 <= "1" when (i1_reg_304 = ap_const_lv7_54) else "0";
    exitcond3_fu_341_p2 <= "1" when (i_reg_280 = ap_const_lv7_54) else "0";
    exitcond4_fu_407_p2 <= "1" when (j_reg_292 = ap_const_lv7_78) else "0";
    exitcond_fu_663_p2 <= "1" when (i2_reg_316 = ap_const_lv7_54) else "0";
    fc_layer2_bias_V_address0 <= tmp_6_fu_675_p1(7 - 1 downto 0);

    fc_layer2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer2_bias_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_weights_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_21_cast_fu_383_p1, tmp_25_cast_fu_477_p1, tmp_33_cast_fu_593_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer2_weights_V_address0 <= tmp_33_cast_fu_593_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer2_weights_V_address0 <= tmp_25_cast_fu_477_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer2_weights_V_address0 <= tmp_21_cast_fu_383_p1(14 - 1 downto 0);
        else 
            fc_layer2_weights_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer2_weights_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_29_cast_fu_528_p1, tmp_37_cast_fu_644_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer2_weights_V_address1 <= tmp_37_cast_fu_644_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer2_weights_V_address1 <= tmp_29_cast_fu_528_p1(14 - 1 downto 0);
        else 
            fc_layer2_weights_V_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_weights_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer2_weights_V_ce1 <= ap_const_logic_1;
        else 
            fc_layer2_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_910_p1 <= p_6_cast_reg_978(9 - 1 downto 0);
    grp_fu_917_p1 <= p_6_cast_reg_978(9 - 1 downto 0);
    grp_fu_924_p1 <= p_6_cast_reg_978(9 - 1 downto 0);
    grp_fu_931_p1 <= p_6_cast_reg_978(9 - 1 downto 0);
    i_4_fu_347_p2 <= std_logic_vector(unsigned(i_reg_280) + unsigned(ap_const_lv7_1));
    i_5_fu_669_p2 <= std_logic_vector(unsigned(i2_reg_316) + unsigned(ap_const_lv7_1));
    i_7_1_fu_547_p2 <= (i1_reg_304 or ap_const_lv7_2);
    i_7_2_fu_598_p2 <= (i1_reg_304 or ap_const_lv7_3);
    i_7_3_fu_649_p2 <= std_logic_vector(unsigned(i1_reg_304) + unsigned(ap_const_lv7_4));
    i_7_s_fu_482_p2 <= (i1_reg_304 or ap_const_lv7_1);

    in_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state4, exitcond4_fu_407_p2)
    begin
        if ((((exitcond4_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state4, exitcond4_fu_407_p2)
    begin
        if (((not(((exitcond4_fu_407_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond4_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_533_p2 <= std_logic_vector(unsigned(j_reg_292) + unsigned(ap_const_lv7_1));
        lhs_V_2_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),9));

    lhs_V_fu_327_p0 <= in_V_V_dout;
        lhs_V_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_327_p0),9));

    newsignbit_0_not_i_i_fu_845_p2 <= (newsignbit_fu_815_p3 xor ap_const_lv1_1);
    newsignbit_fu_815_p3 <= p_Val2_8_fu_810_p2(7 downto 7);
    not_s_i_i2_fu_730_p2 <= (tmp_38_fu_694_p3 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= 
        p_Val2_23_mux_fu_885_p3 when (brmerge_fu_879_p2(0) = '1') else 
        p_Val2_s_518_fu_893_p3;

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state12)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, output_V_addr_8_reg_1005, ap_CS_fsm_state6, output_V_addr_10_reg_1041, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8, tmp_s_fu_388_p1, tmp_2_fu_437_p1, tmp_76_3_fu_604_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address0 <= output_V_addr_10_reg_1041;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address0 <= output_V_addr_8_reg_1005;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= tmp_76_3_fu_604_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= tmp_2_fu_437_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= tmp_s_fu_388_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state5, output_V_addr_7_reg_994, ap_CS_fsm_state6, output_V_addr_9_reg_1031, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8, tmp_76_1_fu_488_p1, tmp_76_2_fu_553_p1, tmp_6_fu_675_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_address1 <= tmp_6_fu_675_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address1 <= output_V_addr_9_reg_1031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address1 <= output_V_addr_7_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= tmp_76_2_fu_553_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address1 <= tmp_76_1_fu_488_p1(7 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, tmp_77_1_reg_1021, ap_CS_fsm_state7, tmp_77_3_reg_1056, ap_CS_fsm_state3, ap_CS_fsm_state8, p_5_cast_fu_402_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_d0 <= tmp_77_3_reg_1056;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d0 <= tmp_77_1_reg_1021;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_d0 <= p_5_cast_fu_402_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv24_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(tmp_3_reg_1016, tmp_77_2_reg_1051, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_d1 <= tmp_77_2_reg_1051;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d1 <= tmp_3_reg_1016;
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_839_p2 <= (tmp_1_fu_834_p2 and brmerge_i_i_fu_828_p2);
        p_5_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_5_fu_397_p2),24));

    p_5_fu_397_p0 <= fc_layer2_weights_V_q0;
    p_5_fu_397_p1 <= read_temp_V_cast_reg_949(9 - 1 downto 0);
    p_5_fu_397_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_5_fu_397_p0) * signed(p_5_fu_397_p1))), 17));
        p_6_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_417_p2),17));

    p_Val2_23_mux_fu_885_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_fu_867_p2(0) = '1') else 
        p_Val2_8_fu_810_p2;
    p_Val2_6_fu_752_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_748_p1) + unsigned(p_Val2_7_cast_fu_710_p1));
        p_Val2_7_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_701_p4),16));

    p_Val2_8_fu_810_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(tmp_42_reg_1089));
    p_Val2_s_518_fu_893_p3 <= 
        ap_const_lv8_80 when (underflow_fu_862_p2(0) = '1') else 
        p_Val2_8_fu_810_p2;
    p_Val2_s_fu_685_p1 <= output_V_q1;
    p_Val2_s_fu_685_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv43_7E211) * signed(p_Val2_s_fu_685_p1))), 43));
        p_a_V_i_cast1_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_a_V_i_fu_766_p3),23));

    p_a_V_i_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_a_V_i_cast1_fu_774_p1),24));
    p_a_V_i_fu_766_p3 <= 
        ap_const_lv16_0 when (tmp_41_fu_758_p3(0) = '1') else 
        p_Val2_6_fu_752_p2;
    p_not38_i_i_fu_851_p2 <= "0" when (tmp_12_reg_1100 = ap_const_lv16_FFFF) else "1";
    p_not_i_i_fu_823_p2 <= "0" when (tmp_12_reg_1100 = ap_const_lv16_0) else "1";
    p_shl1_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_365_p3),15));
    p_shl2_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_609_p3),15));
    p_shl3_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_621_p3),15));
    p_shl4_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_558_p3),15));
    p_shl5_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_570_p3),15));
    p_shl6_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_493_p3),15));
    p_shl7_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_505_p3),15));
    p_shl8_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_442_p3),15));
    p_shl9_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_454_p3),15));
    p_shl_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_353_p3),15));
    qb_assign_2_fu_742_p2 <= (r_i_i2_fu_736_p2 and qbit_fu_714_p3);
    qbit_fu_714_p3 <= grp_fu_938_p3(27 downto 27);
    r_V_2_fu_417_p2 <= std_logic_vector(signed(lhs_V_2_fu_413_p1) + signed(ap_const_lv9_2));
    r_V_4_fu_786_p2 <= std_logic_vector(signed(ap_const_lv24_FFFFFE) + signed(p_a_V_i_cast_fu_778_p1));
    r_V_fu_331_p2 <= std_logic_vector(signed(lhs_V_fu_327_p1) + signed(ap_const_lv9_2));
    r_fu_724_p2 <= "0" when (tmp_40_fu_721_p1 = ap_const_lv27_0) else "1";
    r_i_i2_fu_736_p2 <= (r_fu_724_p2 or not_s_i_i2_fu_730_p2);
        read_temp_V_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_331_p2),17));

    tmp_11_fu_701_p4 <= grp_fu_938_p3(42 downto 28);
    tmp_18_fu_353_p3 <= (i_reg_280 & ap_const_lv7_0);
    tmp_19_fu_365_p3 <= (i_reg_280 & ap_const_lv3_0);
    tmp_1_fu_834_p2 <= (isneg_reg_1094 xor ap_const_lv1_1);
    tmp_20_fu_377_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_361_p1) - unsigned(p_shl1_cast_fu_373_p1));
        tmp_21_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_377_p2),64));

    tmp_21_fu_442_p3 <= (i1_reg_304 & ap_const_lv7_0);
    tmp_22_fu_454_p3 <= (i1_reg_304 & ap_const_lv3_0);
    tmp_23_fu_466_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_450_p1) - unsigned(p_shl9_cast_fu_462_p1));
    tmp_24_fu_472_p2 <= std_logic_vector(unsigned(tmp_23_fu_466_p2) + unsigned(tmp_5_cast_reg_970));
        tmp_25_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_472_p2),64));

    tmp_25_fu_493_p3 <= (i_7_s_fu_482_p2 & ap_const_lv7_0);
    tmp_26_fu_505_p3 <= (i_7_s_fu_482_p2 & ap_const_lv3_0);
    tmp_27_fu_517_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_501_p1) - unsigned(p_shl7_cast_fu_513_p1));
    tmp_28_fu_523_p2 <= std_logic_vector(unsigned(tmp_27_fu_517_p2) + unsigned(tmp_5_cast_reg_970));
        tmp_29_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_523_p2),64));

    tmp_29_fu_558_p3 <= (i_7_1_fu_547_p2 & ap_const_lv7_0);
    tmp_2_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_304),64));
    tmp_30_fu_570_p3 <= (i_7_1_fu_547_p2 & ap_const_lv3_0);
    tmp_31_fu_582_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_566_p1) - unsigned(p_shl5_cast_fu_578_p1));
    tmp_32_fu_588_p2 <= std_logic_vector(unsigned(tmp_31_fu_582_p2) + unsigned(tmp_5_cast_reg_970));
        tmp_33_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_588_p2),64));

    tmp_33_fu_609_p3 <= (i_7_2_fu_598_p2 & ap_const_lv7_0);
    tmp_34_fu_621_p3 <= (i_7_2_fu_598_p2 & ap_const_lv3_0);
    tmp_35_fu_633_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_617_p1) - unsigned(p_shl3_cast_fu_629_p1));
    tmp_36_fu_639_p2 <= std_logic_vector(unsigned(tmp_35_fu_633_p2) + unsigned(tmp_5_cast_reg_970));
        tmp_37_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_639_p2),64));

    tmp_38_fu_694_p3 <= grp_fu_938_p3(42 downto 42);
    tmp_40_fu_721_p1 <= grp_fu_938_p3(27 - 1 downto 0);
    tmp_41_fu_758_p3 <= p_Val2_6_fu_752_p2(15 downto 15);
    tmp_42_fu_782_p1 <= p_a_V_i_fu_766_p3(8 - 1 downto 0);
    tmp_5_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_292),15));
    tmp_6_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_316),64));
    tmp_76_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_s_fu_482_p2),64));
    tmp_76_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_1_fu_547_p2),64));
    tmp_76_3_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_2_fu_598_p2),64));
    tmp_8_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_fu_742_p2),16));
    tmp_s_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_280),64));
    underflow_fu_862_p2 <= (isneg_reg_1094 and brmerge39_i_i_fu_856_p2);
    underflow_not_fu_873_p2 <= (underflow_fu_862_p2 xor ap_const_lv1_1);
end behav;

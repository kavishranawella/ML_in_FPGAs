-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc_layer2_fc_layeccu_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc_layer2_fc_layeccu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110000010", 1 => "11010001110", 2 => "11111010001", 
    3 => "11011000101", 4 => "00000110010", 5 => "11111010000", 
    6 => "00001001111", 7 => "11111111100", 8 => "11111101111", 
    9 => "11110101100", 10 => "11110010110", 11 => "11101110110", 
    12 => "11110100101", 13 => "11001010110", 14 => "11101111111", 
    15 => "11100001010", 16 => "11110011000", 17 => "00001100101", 
    18 => "00010010100", 19 => "00001010011", 20 => "00101100000", 
    21 => "11111101110", 22 => "11011110010", 23 => "11100001011", 
    24 => "11110001100", 25 => "00010111110", 26 => "11110011000", 
    27 => "11101110101", 28 => "11110001000", 29 => "00000101101", 
    30 => "11111101110", 31 => "11111000111", 32 => "11110000110", 
    33 => "00011001011", 34 => "11111011001", 35 => "11110100010", 
    36 => "00000000000", 37 => "00001000100", 38 => "11101010110", 
    39 => "11011011010", 40 => "11111000011", 41 => "11001010000", 
    42 => "11001011100", 43 => "11001011111", 44 => "10111110101", 
    45 => "11101100011", 46 => "11100100101", 47 => "11111000100", 
    48 => "11101100000", 49 => "11110011111", 50 => "00000101011", 
    51 => "11100001001", 52 => "00010000011", 53 => "00010001100", 
    54 => "11111101111", 55 => "11011110011", 56 => "11111011101", 
    57 => "00010010001", 58 => "00100011000", 59 => "11000101011", 
    60 => "11001110110", 61 => "11011000110", 62 => "11010011010", 
    63 => "11110010011", 64 => "00101000011", 65 => "11111011101", 
    66 => "00001111111", 67 => "11101000000", 68 => "00010111110", 
    69 => "00001110001", 70 => "11111001100", 71 => "11000110110", 
    72 => "00010010110", 73 => "11100001100", 74 => "11110101011", 
    75 => "11101011011", 76 => "11101101011", 77 => "00001011000", 
    78 => "00010000111", 79 => "11110001101", 80 => "00001011000", 
    81 => "11110111011", 82 => "11000011100", 83 => "11011010111" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity fc_layer2_fc_layeccu is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc_layer2_fc_layeccu is
    component fc_layer2_fc_layeccu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc_layer2_fc_layeccu_rom_U :  component fc_layer2_fc_layeccu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


